OVIRT SCRIPTS README
--------------------

This is currently a collection of scripts to build/deploy an Ovirt instance,
which is essentially stateless.  Each of the commands is described below, along
with common usage.

creator.py: This is basically livecd-creator from livecd-tools, with a couple
of customization and bugfixes specific to Ovirt.  It is run as:

./creator.py [-b <base_iso>] -c ovirt.ks

which will create a new Live CD ISO based on the kickstart in ovirt.ks.  The
output file will be named something like livecd-ovirt-200710221423.iso

ovirt-cd.sh: This is just a thin wrapper around creator.py, mostly here for
orthogonality with the other commands.

ovirt-flash.sh: This is a wrapper around creator.py and livecd-iso-to-disk.
Basically this creates an ISO with creator.py, and then lays down that ISO on
top of a flash drive.  It is run as:

./ovirt-flash.sh <usb-device> [base_iso]

where the second argument is a base ISO to start from.  Note that this command
completely destroys any USB device you point it at, so be careful.

ovirt-pxe.sh: This is a command to create the files needed to do a PXE boot of
ovirt.  It is run as:

./ovirt-pxe.sh <ether_mod> <remote_ip> [base_iso]

where <ether_mod> is the ethernet module the booting machine needs, and where
<remote_ip> is the name of the server that will be serving the TFTP.  What this
command does is to create an ISO (or use the one from base_iso), and then
modify /tftpboot on the local machine to set it all up for PXE booting.  Then
you can follow "pxe-notes" to set up the rest of the server, and you should be
able to get the machine to boot from PXE.

Typical Script Usage
--------------------

Here's how I've been typically using these scripts.

1)  Have a 1GB flash drive.  I think you can get away with 500MB, but it might
be quite tight.  Put the flash drive into the machine where you have the 
scripts.
2)  Run ./ovirt-flash.sh /dev/sdc.  This will build an ISO from repos, and
lay it down on /dev/sdc
3)  Put the flash drive in the target machine, and boot that machine from USB.
4)  Oops!  I need to make a change.  Edit the ovirt.ks, then run
./creator.py -b iso_from_last_step -c ovirt.ks; this will just update the parts
of the ISO that is needed, which is much faster than regenerating the whole
thing.  Now run ./ovirt-flash.sh /dev/sdc modified_iso, to lay down the
ISO on the flash drive.

Ovirt Usage
-----------
After booting the Ovirt machine with one of these methods, in theory everything
should be setup for a local install, since libvirtd is not yet setup for
remote installs.  Log into the console, and run the following command:

# /usr/bin/qemu-kvm -M pc -m 500 -smp 1 -monitor pty -no-reboot -boot d -hda /dev/VolGroup00/iSCSI1 -cdrom /root/boot.iso -net nic,macaddr=00:16:3e:2f:ab:cd,vlan=0 -net tap,script=/etc/kvm-ifup,vlan=0 -vnc :0

Note that you'll have to have some local storage currently (or manually set
it up via iscsiadm), and you'll need to have the boot.iso locally available.
Assuming all is well, from another machine you should be able to run
"vncviewer <ip>:5900" and finish the installation.

iSCSI disks
-----------
When using iSCSI as the target for disks, you definitely don't want to use
the /dev/sdc device, or whatever.  That could change on subsequent reboots
depending on what order devices are scanned in, how many iSCSI servers there
are, etc, etc.  What you really want to use is the ID (or WWID, or UUID) of the
device.  That's available through /dev/disk/by-id.  For example, say I've
mapped 3 LUNs from iSCSI server laforge.  If I run "# ls /dev/disk/by-path", I
see the following:

ip-192.168.25.1:3260-iscsi-laforge:storage.virt-lun-1
ip-192.168.25.1:3260-iscsi-laforge:storage.virt-lun-1-part1
ip-192.168.25.1:3260-iscsi-laforge:storage.virt-lun-1-part2
ip-192.168.25.1:3260-iscsi-laforge:storage.virt-lun-2
ip-192.168.25.1:3260-iscsi-laforge:storage.virt-lun-2-part1
ip-192.168.25.1:3260-iscsi-laforge:storage.virt-lun-2-part2
ip-192.168.25.1:3260-iscsi-laforge:storage.virt-lun-3
pci-0000:00:1f.2-scsi-0:0:0:0
pci-0000:00:1f.2-scsi-0:0:0:0-part1
pci-0000:00:1f.2-scsi-0:0:0:0-part2
pci-0000:00:1f.2-scsi-1:0:0:0

Note that there are 3 LUNs there.  If you know you want to install on LUN 3,
then "# ls -l /dev/disk/by-path/ip-192.168.25.1:3260-iscsi-laforge:storage.virt-lun-3" and you'll see:

lrwxrwxrwx 1 root root 9 2007-10-24 19:14 ip-192.168.25.1:3260-iscsi-laforge:storage.virt-lun-3 -> ../../sdd

Now run:

# /sbin/scsi_id -g -u -s /block/sdd
16465616462656166313a3300000000000000000000000000

Which gives you the ID.  Finally, what this means is that for your disk device,
you should use:

/dev/disk/by-id/scsi-16465616462656166313a3300000000000000000000000000

which will persist across reboots, and even changes to the LUN scheme.

Miscellaneous
-------------
Currently I have hardcoded a CA and some server certificates into the image,
which we can use for libvirt remote support.  Later on we can use
Kerberos/GSSAPI, but I think this is a good first step, and easy to undo later.
Right now, with the appropriate client keys in place, I can connect remotely
to the Ovirt server, but since we don't yet support installation, it is of
limited usefulness.

TODO
----
1)  List of packages to later remove (but are extremely useful for debugging):
    a) less
    b) openssh-server
    c) openssh-clients
    d) net-tools
    e) nfs-utils
    f) wget
2)  Use GSSAPI instead of TLS for libvirtd remote
3)  Use proper iscsid/iscsi startup scripts instead of my hacked up iscsi_scan.sh