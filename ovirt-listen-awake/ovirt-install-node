#!/bin/bash

PHYS_HOST=physical.priv.ovirt.org
MGMT_HOST=management.priv.ovirt.org

. /etc/init.d/ovirt-functions

PATH=$PATH:/sbin:/usr/sbin
ME=$(basename "$0")
warn() { printf '%s: %s\n' "$ME" "$*" >&2; }
die() { warn "$@"; exit 1; }

usage() {
    echo "Usage: $ME <stateless|stateful>"
}

# first, check to see we are root
if [ $( id -u ) -ne 0 ]; then
    die "Must run as root"
fi

if [ $# -ne 1 ]; then
    usage
    exit 1
fi

backup_file() {
    dir=$(dirname "$1")
    case $dir in /*);; *) die "unexpected non-absolute dir: $dir";; esac
    mkdir -p "$OVIRT_BACKUP_DIR/${dir:1}"
    test -f "$1" && cp -pf "$1" "$OVIRT_BACKUP_DIR/${dir:1}"
}

add_if_not_exist() {
    string="$1"
    file="$2"

    grep -qE "^[[:space:]]*$string($|#|[[:space:]])" "$file" \
        || echo "$string" >> "$file"
}

if [ "$1" = "stateless" ]; then
    chkconfig --level 3 ovirt-early on
    chkconfig --level 3 ovirt on
    chkconfig --level 3 ovirt-post on
    chkconfig --level 3 collectd on

    ovirt_setup_libvirtd

    # make sure we don't autostart virbr0 on libvirtd startup
    rm -f /etc/libvirt/qemu/networks/autostart/default.xml

    # remove the /etc/krb5.conf file; it will be fetched on bootup
    rm -f /etc/krb5.conf

    g=$(printf '\33[1m\33[32m')    # similar to g=$(tput bold; tput setaf 2)
    n=$(printf '\33[m')            # similar to n=$(tput sgr0)
    version=$(rpm -q --qf '%{version}' ovirt-node)
    release=$(rpm -q --qf '%{release}' ovirt-node)
    cat <<EOF > /etc/issue

           888     888 ${g}d8b$n         888
           888     888 ${g}Y8P$n         888
           888     888             888
   .d88b.  Y88b   d88P 888 888d888 888888
  d88''88b  Y88b d88P  888 888P'   888
  888  888   Y88o88P   888 888     888
  Y88..88P    Y888P    888 888     Y88b.
   'Y88P'      Y8P     888 888      'Y888

  oVirt Node release ${version}-${release}

  Virtualization just got the ${g}Green Light$n

EOF
    cp -p /etc/issue /etc/issue.net
elif [ "$1" = "stateful" ]; then
    echo "This script will make a number of changes to your system to enable it"
    echo "to work as an oVirt node.  You can later undo these changes by"
    echo "running /usr/sbin/ovirt-uninstall-host.  Do you want to proceed? [y/N]?"
    read yesno

    if [ "$yesno" != "y" -a "$yesno" != "Y" ]; then
        exit 2
    fi

    # Always try to uninstall first, that way the original pristine files are
    # in place before re-installing, this prevents OVIRT_BACKUP_DIR from
    # being overwritten with an older version of the node config files
    ovirt-uninstall-node > /dev/null 2>&1

    # Remove old keytab if it exists in case we have a new appliance to work with
    rm -f /etc/libvirt/krb5.tab

    rm -Rf $OVIRT_BACKUP_DIR
    mkdir -p $OVIRT_BACKUP_DIR

    backup_file /etc/sysconfig/network
    if grep "^HOSTNAME=" /etc/sysconfig/network > /dev/null 2>&1 ; then
        sed -i -e "s/^HOSTNAME=.*/HOSTNAME=$PHYS_HOST/" /etc/sysconfig/network
    else
        echo "HOSTNAME=$PHYS_HOST" >> /etc/sysconfig/network
    fi
    hostname $PHYS_HOST

    collectd_conf=/etc/collectd.conf
    backup_file $collectd_conf
    if [ -f $collectd_conf.in ]; then
        sed -e "s/@COLLECTD_SERVER@/$MGMT_HOST/" \
            -e "s/@COLLECTD_PORT@/25826/" $collectd_conf.in \
            > $collectd_conf
    fi

    libvirt_qpid_conf=/etc/sysconfig/libvirt-qpid
    backup_file $libvirt_qpid_conf
    if [ -f $libvirt_qpid_conf ]; then
        if grep "^LIBVIRT_QPID_ARGS=" $libvirt_qpid_conf > /dev/null 2>&1 ; then
            sed -i -e "s/^LIBVIRT_QPID_ARGS=.*/LIBVIRT_QPID_ARGS=\"--broker $MGMT_HOST --port 5672\"/" $libvirt_qpid_conf
        else
            echo "LIBVIRT_QPID_ARGS=\"--broker $MGMT_HOST --port 5672\"" >> $libvirt_qpid_conf
        fi
    fi

    backup_file /etc/hosts
    add_if_not_exist "192.168.50.1 $PHYS_HOST" /etc/hosts
    add_if_not_exist "192.168.50.2 $MGMT_HOST" /etc/hosts

    chkconfig ovirt-listen-awake on
    chkconfig collectd on
    chkconfig libvirt-qpid on
    chkconfig iptables on
    chkconfig ntpdate on
    chkconfig ntpd on

    backup_file /etc/sysconfig/libvirtd
    backup_file /etc/libvirt/qemu.conf
    backup_file /etc/libvirt/libvirtd.conf
    backup_file /etc/sasl2/libvirt.conf
    backup_file /etc/krb5.conf
    ovirt_setup_libvirtd

    backup_file /etc/sysconfig/iptables
    # We open up anything coming from ovirtbr0 to this node, since it
    # is only intended for demo purposes.  For reference, here are the
    # ports that need to be opened:
    # 7777:tcp (ovirt-listen-awake), 16509:tcp (libvirtd), 5900-6000:tcp (vnc),
    # 49152-49216:tcp (libvirt migration)
    lokkit -q -t ovirtbr0

    service iptables restart

    # Check if any domains are active before restarting libvirtd, since it will
    # kill them.  Header information from virsh list is 2 lines, and 1 line for
    # footer.  So > 3 lines means domains are running
    running_domains=$(( $(virsh -c qemu:///system list 2> /dev/null | wc -l) - 3 ))
    if [ $running_domains -gt 0 ]; then
        echo "Cannot restart libvirtd because domains are active."
        echo "Please shutdown all domains and restart libvirtd with:"
        echo "service libvirtd restart"
    else
        service libvirtd restart
    fi

    service collectd restart
    service ovirt-listen-awake restart
    service libvirt-qpid restart
    service ntpd stop
    service ntpdate start
    service ntpd start
else
    usage
    exit 1
fi
