#!/bin/bash
#
# ovirt-config-boot - configure local boot/root disk partitions

# SYNOPSIS
# ovirt-config-boot livecd_path bootparams reboot
#
#       livecd_path - where livecd media is mounted,
#                     parent of LiveOS and isolinux folders
#                     default is /live
#
#       bootparams  - extra boot parameters like console=...
#                     default is $OVIRT_BOOTPARAMS
#
#       reboot      - reboot after install
#                     default is yes

# Source functions library
. /etc/init.d/functions
. /etc/init.d/ovirt-functions

trap '__st=$?; stop_log; exit $__st' 0
trap 'exit $?' 1 2 13 15

ovirt_boot_setup() {
    local live=$1
    local bootparams=$2
    local disk
    local partN=-1
    log "installing oVirt Node image."
    mount_boot
    # check that /boot mounted ok and find partition number for GRUB
    eval $(mount|awk '$3 == "/boot" {
        print "disk=" substr($1,1,length($1)-1);
        partN=substr($1,length($1),1); partN--;
        print "partN=" partN;
    }')
    rc=$?
    if [ $rc -ne 0 -o $partN -lt 0 ]; then
      log "boot partition not available."
      return 1
    fi
    mkdir -p /liveos
    # prepare Root partition update
    lvrename HostVG RootBackup RootNew \
    && mount /dev/HostVG/RootNew /liveos
    rc=$?
    if [ $rc -ne 0 ]; then
      log "root partition not available."
      return $rc
    fi
    # install oVirt Node image for local boot
    if [ -e "$live/syslinux" ]; then
      syslinux=syslinux
    elif [ -e "$live/isolinux" ]; then
      syslinux=isolinux
    else
      syslinux=
    fi
    rm -rf /boot/grub
    rm -rf /liveos/LiveOS
    mkdir -p /boot/grub
    mkdir -p /liveos/LiveOS
    cp -p $live/LiveOS/squashfs.img /liveos/LiveOS \
    && cp -p $live/$syslinux/vmlinuz0 /boot
    rc=$?
    if [ $rc -ne 0 ]; then
      log "image copy failed."
      return $rc
    fi
    # append LVM support to the livecd initramfs
    tmpdir=$(mktemp -d)
    cd $tmpdir
    gzip -dc $live/$syslinux/initrd0.img |
        cpio -id init sbin/real-init
    init_script=init
    if [ -e sbin/real-init ]; then
        # Fedora 10 mkliveinitrd
        init_script=sbin/real-init
    fi
    sed -i '/^\/sbin\/udev.*settle/ a \echo Scanning logical volumes\
lvm vgscan --ignorelockingfailure\
echo Activating logical volumes\
lvm vgchange -ay --ignorelockingfailure HostVG \
' $init_script
    # fix emergency shell
    sed -i 's/^    bash$/    bash < \/dev\/console/' $init_script
    # do not fail if device node already exists
    sed -i 's/mknod.*$/& || :/' $init_script
    mkdir -p bin
    bit=
    if [ -e /lib64 ]; then
        bit=64
    fi
    mkdir -p lib$bit
    if [ -e /sbin/lvm.static ]; then
        cp /sbin/lvm.static bin/lvm
    else
        cp /sbin/lvm bin
        # lvm is not static in Fedora
        cp /lib$bit/libreadline.so.5 /lib$bit/libncurses.so.5 lib$bit
    fi
    find $init_script bin/lvm lib$bit -type f |
        cpio -H newc --quiet -o |
        gzip -9 |
        cat $live/$syslinux/initrd0.img - > /boot/initrd0.img

    version=$(rpm -q --qf '%{version}' ovirt-node)
    release=$(rpm -q --qf '%{release}' ovirt-node)
    # reorder tty0 to allow both serial and phys console after installation
    bootparams="ro root=/dev/HostVG/Root roottypefs=ext3 console=tty0 \
                $(echo $bootparams | sed s/console=tty0//g)"
    cat > /boot/grub/grub.conf << EOF
default=0
timeout=5
hiddenmenu
title oVirt Node (${version}-${release})
    root (hd0,$partN)
    kernel /vmlinuz0 $bootparams
    initrd /initrd0.img
EOF
    echo "(hd0) $disk" > /boot/grub/device.map
    ( cd /usr/share/grub/*; cp -p stage? e2fs_stage1_5 /boot/grub )
    grub --device-map=/boot/grub/device.map <<EOF
root (hd0,$partN)
setup --prefix=/grub (hd0)
EOF
    rc=$?
    if [ $rc -ne 0 ]; then
        log "boot loader install failed."
        return $rc
    fi
    umount /liveos
    umount /boot
    # mark new Root ready to go, reboot() in ovirt-function switches it to active
    lvrename HostVG RootNew RootUpdate

    rm -rf $tmpdir
    log "done."
}

start_log
live=$1
bootparams=$2
doreboot=$3
if [ -z "$live" -o "$live" = "-h" -o "$live" = "--help" ]; then
    echo "Usasge: $0 livecd_path bootparams reboot(yes/no)"
fi
if [ -z "$bootparams" ]; then
    bootparams="$OVIRT_BOOTPARAMS"
fi
if [ -z "$doreboot" ]; then
    doreboot="yes"
fi

ovirt_boot_setup "$live" "$bootparams"
rc=$?
if [ $rc -eq 0 -a "$doreboot" = "yes" ]; then
    disable_firstboot
    ovirt_store_firstboot_config
    stop_log
    reboot
fi
stop_log
exit $rc
