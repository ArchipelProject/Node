#!/bin/bash
#
# ovirt-config-boot - configure local boot/root disk partitions

# SYNOPSIS
# ovirt-config-boot livecd_path bootparams reboot
#
#       livecd_path - where livecd media is mounted,
#                     parent of LiveOS and isolinux folders
#                     default is /live
#
#       bootparams  - extra boot parameters like console=...
#                     default is $OVIRT_BOOTPARAMS
#
#       reboot      - reboot after install
#                     default is yes

# Source functions library
. /etc/init.d/functions
. /usr/libexec/ovirt-functions

trap '__st=$?; stop_log; exit $__st' 0
trap 'exit $?' 1 2 13 15

ovirt_boot_setup() {
    local live=$1
    local bootparams=$2
    local disk
    local disk2
    local partN=-1
    log "installing the image."

    if [ "$OVIRT_ROOT_INSTALL" = "n" ]; then
        log "done."
        return
    fi

    if [ -e "$live/syslinux" ]; then
      syslinux=syslinux
    elif [ -e "$live/isolinux" ]; then
      syslinux=isolinux
    else
      syslinux=
    fi

    if [ ! -e "$live/LiveOS/squashfs.img" \
      -o ! -e "$live/$syslinux/version" ]; then
      log "source image not valid."
      return 1
    fi
    . /etc/default/version
    local current_version=$VERSION
    local current_major=$(echo $VERSION|cut -d. -f1)
    # image version
    . $live/$syslinux/version
    local new_major=$(echo $VERSION|cut -d. -f1)
    # only N.x -> N.y upgrades are allowed
    if [ "$current_major" != "$new_major" ]; then
      log "cannot upgrade from $current_version to $VERSION."
      return 1
    fi

    local found_boot=false
    if findfs LABEL=Boot 2>&1 >/dev/null ; then
        found_boot=true
        grub_dev_label=Boot
    elif findfs LABEL=Root 2>&1 >/dev/null ; then
        found_boot=false
        grub_dev_label=Root
    fi
    if $found_boot; then
        mount_boot
        mountpoint /boot
        if [ $? -ne 0 ] ; then
            log "Boot partition not available"
            return 1
        fi
        # Grab OVIRT_ISCSI VARIABLES from boot partition for upgrading
        # file created only if OVIRT_ISCSI_ENABLED=y
        if [ -f /boot/ovirt ]; then
            . /boot/ovirt
        iscsiadm -p $OVIRT_ISCSI_TARGET_IP:$OVIRT_ISCSI_TARGET_PORT -m discovery -t sendtargets
        log "Restarting iscsi service"
        service iscsi restart
        fi
    else
        grub_dev_label="RootBackup"
    fi

    # check that /boot mounted ok and find partition number for GRUB, $4 is to allow 0 as a partition number for grub
    get_part_info $(readlink -f $(findfs LABEL=$grub_dev_label 2>/dev/null)) disk partN y
    rc=$?
    if [ $rc -ne 0 -o $partN -lt 0 ]; then
      log "unable to determine Root partition"
      return 1
    fi

    if [ "$OVIRT_ISCSI_ENABLED" != "y" ]; then
        mount_liveos
        mountpoint /liveos
        if [ $? -ne 0 ] ; then
          log "Root partition not available"
          return 1
        fi

        # prepare Root partition update
        candidate=
        if findfs LABEL=RootBackup 2>&1 >/dev/null; then
            candidate=RootBackup
        elif findfs LABEL=RootUpdate 2>&1 >/dev/null; then
            candidate=RootUpdate
        elif findfs LABEL=RootNew 2>&1 >/dev/null; then
            candidate=RootNew
        fi
        if [ -z "$candidate" ]; then
            rc=1
        elif [ "$candidate" = "RootNew" ]; then
            umount /liveos
            candidate_dev=$(findfs LABEL=$candidate 2>/dev/null)
            rc=$?
        else
            candidate_dev=$(findfs LABEL=$candidate 2>/dev/null)
            e2label "$candidate_dev" RootNew
            rc=$?
        fi
        if [ $rc -ne 0 ]; then
          log "root partition not available."
          log "$(ls -al /dev/disk/by-label)"
          return $rc
        fi

        mount "$candidate_dev" /liveos/

        rm -rf /liveos/LiveOS
        mkdir -p /liveos/LiveOS

    fi

    if [ "$OVIRT_ISCSI_ENABLED" = "y" ]; then
        initrd_dest="/boot"
        grub_dir="/boot/grub"
        grub_prefix="/grub"
    else
        initrd_dest="/liveos"
        grub_dir="/liveos/boot/grub"
        grub_prefix="/boot/grub"
    fi

    # backup current kernel/initrd
    if [ "$candidate" != "Root" \
         -a -e "$initrd_dest/vmlinuz0" -a -e "$initrd_dest/initrd0.img" ]; then
        cp -p $initrd_dest/vmlinuz0 $initrd_dest/backup-vmlinuz0 \
        && cp -p $initrd_dest/initrd0.img $initrd_dest/backup-initrd0.img
    fi

    cp -p $live/$syslinux/vmlinuz0 $initrd_dest \
    && cp -p $live/$syslinux/initrd0.img $initrd_dest
    rc=$?
    if [ $rc -ne 0 ]; then
        log "kernel image copy failed."
        return $rc
    fi

    if [ "$OVIRT_ISCSI_ENABLED" != "y" ]; then
        cp -p $live/LiveOS/squashfs.img /liveos/LiveOS
        rc=$?
        if [ $rc -ne 0 ]; then
          log "squashfs image copy failed."
          return $rc
        fi
    fi

    local oldtitle
    if [ "$candidate" = "Root" ]; then
        oldtitle=$(grep ^title /boot/grub/grub.conf|tail -n1|cut -c7-)
    else
        oldtitle="BACKUP $(grep ^title /boot/grub/grub.conf|head -n1|cut -c7-)"
    fi
    # reorder tty0 to allow both serial and phys console after installation
    if [ "$OVIRT_ISCSI_ENABLED" = "y" ]; then
        bootparams="ro root=LABEL=ovirt-node-root roottypefs=ext4 console=tty0 \
                    netroot=iscsi:$OVIRT_ISCSI_TARGET_IP::$OVIRT_ISCSI_TARGET_PORT::$OVIRT_ISCSI_NODE_NAME ip=eth0:dhcp"
    else
        bootparams="ro root=live:LABEL=Root roottypefs=ext4 console=tty0 \
                $(echo $bootparams | sed s/console=tty0//g)"
    fi
    mkdir -p $grub_dir
    cat > $grub_dir/grub.conf << EOF
default saved
timeout 5
hiddenmenu
title $PRODUCT (${VERSION}-${RELEASE})
    root (hd0,$partN)
    kernel /vmlinuz0 $bootparams
    initrd /initrd0.img
EOF
    local backup_entry=0
    if [ -n "$oldtitle" \
      -a -e "$initrd_dest/backup-vmlinuz0" \
      -a -e "$initrd_dest/backup-initrd0.img" ]; then
        cat >> $grub_dir/grub.conf << EOF
title ${oldtitle}
    root (hd0,$partN)
    kernel /backup-vmlinuz0 $bootparams root=live:LABEL=RootBackup
    initrd /backup-initrd0.img
    savedefault
EOF
        backup_entry=1
    fi
    echo "(hd0) $disk" > $grub_dir/device.map
    ( cd /usr/share/grub/*; cp -p stage? e2fs_stage1_5 $grub_dir )
    # grub setup will do direct changes
    sync
    grub --device-map=$grub_dir/device.map <<EOF
root (hd0,$partN)
setup --prefix=$grub_prefix (hd0)
EOF
    rc=$?
    if [ $rc -ne 0 ]; then
        log "boot loader install failed."
        return $rc
    fi

    if [ "$OVIRT_ISCSI_ENABLED" != "y" ]; then
        umount /liveos
        rc=$?
        if [ $rc -ne 0 ]; then
            log "umount /liveos failed."
            return $rc
        fi
        # mark new Root ready to go, reboot() in ovirt-function switches it to active
        e2label "$candidate_dev" RootUpdate
        mount "$candidate_dev" /liveos
        grub <<EOF_SAVEDEFAULT
savedefault --default=$backup_entry
savedefault --default=0 --once
EOF_SAVEDEFAULT
    fi

    if [ "$OVIRT_ISCSI_ENABLED" = "y" ]; then
        # copy defaults for when Root/HostVG is inaccessible(iscsi upgrade)
        cp $OVIRT_DEFAULTS /boot
    fi

    log "done."
}

live=$1
bootparams=$2
doreboot=$3
if [ -z "$live" -o "$live" = "-h" -o "$live" = "--help" ]; then
    cat <<EOF
Usage: $0 [livecd_path] [bootparams] [reboot(yes/no)]
       livecd_path - where livecd media is mounted,
                     parent of LiveOS and isolinux folders
                     default is /live

       bootparams  - extra boot parameters like console=...
                     default is "$OVIRT_BOOTPARAMS"

       reboot      - reboot after install
                     default is yes
EOF
    exit 1
fi

if ! is_local_storage_configured; then
    printf "\nLocal storage must be configured prior to installing \n"
    exit 99
fi

if [ -z "$bootparams" ]; then
    bootparams="$OVIRT_BOOTPARAMS"
fi
if [ -z "$doreboot" ]; then
    doreboot="yes"
fi

start_log
if [ "$OVIRT_ROOT_INSTALL" = "n" ]; then
    log "done."
    return
else
    ovirt_boot_setup "$live" "$bootparams"
fi
rc=$?
if [ $rc -eq 0 -a "$doreboot" = "yes" ]; then
    disable_firstboot
    if [ "$OVIRT_ISCSI_ENABLED" != "y" ]; then
        ovirt_store_firstboot_config
    fi
    stop_log

    reboot
fi
stop_log
exit $rc
