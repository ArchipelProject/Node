#!/bin/bash
#
# ovirt-config-boot - configure local boot/root disk partitions

# SYNOPSIS
# ovirt-config-boot livecd_path bootparams reboot
#
#       livecd_path - where livecd media is mounted,
#                     parent of LiveOS and isolinux folders
#                     default is /live
#
#       bootparams  - extra boot parameters like console=...
#                     default is $OVIRT_BOOTPARAMS
#
#       reboot      - reboot after install
#                     default is yes

# Source functions library
. /etc/init.d/functions
. /etc/init.d/ovirt-functions

trap '__st=$?; stop_log; exit $__st' 0
trap 'exit $?' 1 2 13 15

ovirt_boot_setup() {
    local live=$1
    local bootparams=$2
    local disk
    local disk2
    local partN=-1
    log "installing the image."
    if [ -h /dev/disk/by-label/Boot ]; then
        mount_boot
        mountpoint /boot
        if [ $? -ne 0 ] ; then
            log "Boot partition not available"
            return 1
        fi
        grub_dev_label="Boot"
        # Grab OVIRT_ISCSI VARIABLES from boot partition for upgrading
        # file created only if OVIRT_ISCSI_ENABLED=y
        if [ -f /boot/ovirt ]; then
            . /boot/ovirt
        iscsiadm -p $OVIRT_ISCSI_TARGET_IP:$OVIRT_ISCSI_TARGET_PORT -m discovery -t sendtargets
        log "Restarting iscsi service"
        service iscsi restart
        fi
    else
        grub_dev_label="RootBackup"
    fi
    mount_liveos
    # check that /boot mounted ok and find partition number for GRUB
    eval $(readlink -f /dev/disk/by-label/$grub_dev_label|awk {'
        print "disk=" substr($1,1,length($1)-1);
        print "disk2=" substr($1,1,length($1)-2);
        partN=substr($1,length($1),1); partN--;
        print "partN=" partN;
    }')
    rc=$?
    if [ $rc -ne 0 -o $partN -lt 0 ]; then
      log "unable to determine Root partition"
      return 1
    fi

    mountpoint /liveos
    if [ $? -ne 0 ] ; then
      log "Root partition not available"
      return 1
    fi

    if [ ! -e "$disk" ]; then
        # e.g. c0d0p1
        disk="$disk2"
    fi
    mkdir -p /liveos
    # prepare Root partition update
    candidate=
    if [ -e /dev/disk/by-label/RootBackup ]; then
        candidate=RootBackup
    elif [ -e /dev/disk/by-label/RootUpdate ]; then
        candidate=RootUpdate
    elif [ -e /dev/disk/by-label/RootNew ]; then
        candidate=RootNew
    fi
    if [ -z "$candidate" ]; then
        rc=1
    elif [ "$candidate" = "RootNew" ]; then
        umount /liveos
        rc=0
    else
        candidate_dev=$(readlink -f /dev/disk/by-label/$candidate)
        e2label $candidate_dev RootNew
        rc=$?
    fi
    if [ $rc -ne 0 ]; then
      log "root partition not available."
      log "$(ls -al /dev/disk/by-label)"
      return $rc
    fi

    mount $candidate_dev /liveos
    # install oVirt Node image for local boot
    if [ -e "$live/syslinux" ]; then
      syslinux=syslinux
    elif [ -e "$live/isolinux" ]; then
      syslinux=isolinux
    else
      syslinux=
    fi

    rm -rf /liveos/LiveOS
    mkdir -p /liveos/LiveOS

    if [ "$OVIRT_ISCSI_ENABLED" == "y" ]; then
        initrd_dest="/boot"
        grub_dir="/boot/grub"
        grub_prefix="/grub"
    else
        initrd_dest="/liveos"
        grub_dir="/liveos/boot/grub"
        grub_prefix="/boot/grub"
    fi

    rm -rf  $grub_dir
    mkdir -p $grub_dir

    cp -p $live/LiveOS/squashfs.img /liveos/LiveOS \
    && cp -p $live/$syslinux/vmlinuz0 $initrd_dest
    rc=$?
    if [ $rc -ne 0 ]; then
      log "image copy failed."
      return $rc
    fi
    # append LVM support to the livecd initramfs
    tmpdir=$(mktemp -d)
    cd $tmpdir
    gzip -dc $live/$syslinux/initrd0.img |
        cpio -id init sbin/real-init
    init_script=init
    if [ -e sbin/real-init ]; then
        # Fedora 10 mkliveinitrd
        init_script=sbin/real-init
    fi
    sed -i '/^\/sbin\/udev.*trigger/ a \
echo SCSI wait for scans\
/sbin/modprobe scsi_wait_scan\
/sbin/modprobe -r scsi_wait_scan\
set +e\
while true; do\
  echo Scanning logical volumes\
  lvm vgscan --ignorelockingfailure\
  echo Activating logical volumes\
  if lvm vgchange -ay --ignorelockingfailure HostVG; then\
    break\
  fi\
  sleep 1\
done\
set -e\
' $init_script
    # fix emergency shell
    sed -i 's/^    bash$/    bash < \/dev\/console/' $init_script
    mkdir -p bin
    bit=
    if [ -e /lib64 ]; then
        bit=64
    fi
    mkdir -p lib$bit
    if [ -e /sbin/lvm.static ]; then
        cp /sbin/lvm.static bin/lvm
    else
        cp /sbin/lvm bin
        # lvm is not static in Fedora
        cp /lib$bit/libreadline.so.5 /lib$bit/libncurses.so.5 lib$bit
    fi

    find $init_script bin/lvm lib$bit -type f |
        cpio -H newc --quiet -o |
        gzip -9 |
        cat $live/$syslinux/initrd0.img - > $initrd_dest/initrd0.img

    version=$(rpm -q --qf '%{version}' ovirt-node)
    release=$(rpm -q --qf '%{release}' ovirt-node)
    # reorder tty0 to allow both serial and phys console after installation
    if [ "$OVIRT_ISCSI_ENABLED" == "y" ]; then
        bootparams="ro root=LABEL=live:Root roottypefs=ext3 console=tty0 \
                    netroot=iscsi:$OVIRT_ISCSI_TARGET_IP::$OVIRT_ISCSI_TARGET_PORT::$OVIRT_ISCSI_NODE_NAME ip=eth0:dhcp"
    else
        bootparams="ro root=LABEL=live:Root roottypefs=ext3 console=tty0 \
                $(echo $bootparams | sed s/console=tty0//g)"
    fi
    cat > $grub_dir/grub.conf << EOF
default=0
timeout=5
hiddenmenu
title oVirt Node (${version}-${release})
    root (hd0,$partN)
    kernel /vmlinuz0 $bootparams
    initrd /initrd0.img
EOF
    echo "(hd0) $disk" > $grub_dir/device.map
    ( cd /usr/share/grub/*; cp -p stage? e2fs_stage1_5 $grub_dir )
    grub --device-map=$grub_dir/device.map <<EOF
root (hd0,$partN)
setup --prefix=$grub_prefix (hd0)
EOF
    rc=$?
    if [ $rc -ne 0 ]; then
        log "boot loader install failed."
        return $rc
    fi

    umount /liveos
    # mark new Root ready to go, reboot() in ovirt-function switches it to active
    e2label $candidate_dev RootUpdate

    rm -rf $tmpdir
    if [ "$OVIRT_ISCSI_ENABLED" == "y" ]; then
        # copy default for when Root/HostVG is inaccessible(iscsi upgrade
        cp $OVIRT_DEFAULTS /boot
    fi
    log "done."
}

live=$1
bootparams=$2
doreboot=$3
if [ -z "$live" -o "$live" = "-h" -o "$live" = "--help" ]; then
    cat <<EOF
Usage: $0 [livecd_path] [bootparams] [reboot(yes/no)]
       livecd_path - where livecd media is mounted,
                     parent of LiveOS and isolinux folders
                     default is /live

       bootparams  - extra boot parameters like console=...
                     default is "$OVIRT_BOOTPARAMS"

       reboot      - reboot after install
                     default is yes
EOF
    exit 1
fi
if [ -z "$bootparams" ]; then
    bootparams="$OVIRT_BOOTPARAMS"
fi
if [ -z "$doreboot" ]; then
    doreboot="yes"
fi

start_log
ovirt_boot_setup "$live" "$bootparams"
rc=$?
if [ $rc -eq 0 -a "$doreboot" = "yes" ]; then
    disable_firstboot
    ovirt_store_firstboot_config
    stop_log
    reboot
fi
stop_log
exit $rc
