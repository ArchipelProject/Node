#!/bin/bash
#
# ovirt-early Start early ovirt services
#
### BEGIN INIT INFO
# Provides: ovirt-early
# Required-Start: ovirt-awake
# Default-Start: 2 3 4 5
# Dewscription: Managed node early configuration service
### END INIT INFO

# Source functions library
. /etc/init.d/functions
. /etc/init.d/ovirt-functions

prog=ovirt-early
VAR_SUBSYS_OVIRT_EARLY=/var/lock/subsys/$prog

# load the configuration file
[ -f "$NODE_CONFIG" ] && . "$NODE_CONFIG"

BONDING_MODCONF_FILE=/etc/modprobe.d/bonding
AUGTOOL_CONFIG=/var/tmp/augtool-config
EARLY_DIR=/etc/ovirt-early.d

get_mac_addresses() {
    local DEVICE=$1

    macs=""
    devices=$(ls -b /sys/class/net/)
    for device in $devices; do
        if [ "$device" != "$DEVICE" ]; then
            mac=$(cat /sys/class/net/$device/address 2>/dev/null)
            if [ -n "$mac" -a "$mac" != "00:00:00:00:00:00" ]; then
                macs="${macs}${mac}=${device},"
            fi
        fi
    done
}

configure_ovirt_management_nic() {
    DEVICE=$1

    if [ -n "$DEVICE" ]; then
        log "Configuring network"
        if ! network_up ; then
            log "Using interface $DEVICE"
            # setup temporary interface to retrieve configuration
            /sbin/dhclient $1
        fi
        if [ $? -eq 0 ]; then
            # from network-scripts/ifup-post
            IPADDR=$(LC_ALL=C ip -o -4 addr ls dev ${DEVICE} | awk '{ print $4 ; exit }')
            log "Interface brought up with $IPADDR"
            eval $(ipcalc --silent --hostname ${IPADDR} ; echo "status=$?")
            if [ "$status" = "0" ]; then
                hostname $HOSTNAME
                log "Hostname resolved to $HOSTNAME"
                # retrieve remote config
                find_srv ovirt tcp
                if [ -n "$SRV_HOST" -a -n "$SRV_PORT" ]; then
                    log "oVirt Server found at: $SRV_HOST:$SRV_PORT"
                    cfgdb=$(mktemp)
                    get_mac_addresses $DEVICE
                    log "MACs to use: $macs"
                    wget -O $cfgdb --no-check-certificate \
                      "http://$SRV_HOST:$SRV_PORT/ovirt/managed_node/config?host=$(hostname)&macs=$macs"
                    if [ $? -eq 0 ]; then
                        log "Remote configuration bundle retrieved to $cfgdb"
                        ovirt-process-config $cfgdb $BONDING_MODCONF_FILE $AUGTOOL_CONFIG
                        if [ $? -eq 0 ]; then
                            log "Remote configuration retrieved and applied"
                            rm $cfgdb
                        else
                            log "Failure to retrieve or apply remote configuration"
                        fi
                    else
                        log "Failed to retrieve configuration bundle"
                    fi
                fi
            fi
        fi
    else
        # for non-PXE boot when BOOTIF parameter is not specified
        # otherwise default network config is invalid
        DEVICE=eth0
    fi
    # default oVirt network configuration:
    # bridge each ethernet device in the system
    BRIDGE=br$DEVICE
    local ifcfg=/etc/sysconfig/network-scripts/ifcfg-$BRIDGE

    # only write a default file if one does not exist
    if [ ! -f $ifcfg ]; then
        log "Applying default configuration to $DEVICE and $BRIDGE"
        printf '%s\n' "DEVICE=$DEVICE" ONBOOT=yes "BRIDGE=$BRIDGE" \
            > /etc/sysconfig/network-scripts/ifcfg-$DEVICE
        printf '%s\n' "DEVICE=$BRIDGE" "BOOTPROTO=dhcp" \
            ONBOOT=yes TYPE=Bridge PEERNTP=yes DELAY=0 \
            > /etc/sysconfig/network-scripts/ifcfg-$BRIDGE
        log "Default config applied"
    fi
}

# $(get_live_disk)
# livecd boot disk
get_live_disk() {
    local live_dev=/dev/live
    if [ ! -e $live_dev ]; then
      # PXE boot
      live_dev=/dev/loop0
      live_disk=
    else
      live_part=$(readlink -e $live_dev)
      live_disk=$(basename $(dirname $(udev_info $live_part path)))
    fi
    echo $live_disk
}

# find_disk $bus $serial
find_disk() {
    local bus=$1
    local serial=$2
    local live=$(get_live_disk)
    for d in /dev/disk/by-id/{scsi,usb}*; do
      ID_FS_USAGE=
      eval $(udev_info $d env)
      # ID_FS_USAGE is set for partitions
      if [ -z "$ID_FS_USAGE" -a "$ID_BUS" = "$bus" ]; then
        if [ -z "$serial" -o "$ID_SERIAL" = "$serial" ]; then
          if [ -n "$live" -a "$d" = "$live" ]; then
            # cannot install LiveOS over itself
            continue
          else
            echo $(readlink -e $d)
            return 0
          fi
        fi
      fi
    done
    return 1
}

configure_management_interface() {
    log "Configuring the manangement interface."
    case $OVIRT_RUNTIME_MODE in
        "ovirt")
            configure_ovirt_management_nic $bootif
            if [ -n "$init" ]; then
                ovirt-config-storage AUTO
                # initial configuration storage, after /config creation
                ovirt_store_config \
                    /etc/sysconfig/network-scripts/ifcfg-* \
                    $BONDING_MODCONF_FILE
                if [ $upgrade = 1 ]; then
                    # local disk installation for managed mode
                    mount_live
                    ovirt-config-boot /live "$bootparams"
                fi
            fi
            ;;
        "managed")
            if [ -x $MANAGEMENT_SCRIPTS_DIR/configure-management-interface ]; then
                log "Executing $MANAGEMENT_SCRIPTS_DIR/configure-management-interface"
                $MANAGEMENT_SCRIPTS_DIR/configure-management-interface
            else
                echo "No script to configure management interface found."
            fi
            ;;
        "none")
            log "Unmanaged node: no management interface to configure."
    esac
}

start() {
    touch $VAR_SUBSYS_OVIRT_EARLY
    # oVirt boot parameters
    #   BOOTIF=link|eth*|<MAC> (appended by pxelinux)
    #   ovirt_init=[usb|scsi[:serial#]|/dev/...]
    #   ovirt_vol=BOOT_MB:SWAP_MB:ROOT_MB:CONFIG_MB:LOGGING_MB:DATA_MB
    #   ovirt_overcommit=<overcommit_ratio>
    #   ovirt_upgrade
    #   ovirt_standalone
    #   ovirt_firstboot
    #   rescue
    #   pxelinux format: ip=<client-ip>:<boot-server-ip>:<gw-ip>:<netmask>
    #   anaconda format: ip=<client-ip> netmask=<netmask> gateway=<gw-ip>
    #   ipv6=dhcp|auto
    #   dns=server[,server]
    #   ntp=server[,server]
    #   syslog=server[:port]
    #   collectd=server[:port]
    #   hostname=fqdn
    #   TBD logrotate maxsize

    #   BOOTIF=link|eth*|<MAC> (appended by pxelinux)
    # network boot interface is assumed to be on management network where
    # oVirt Server is reachable
    # BOOTIF=<MAC> e.g. BOOTIF=01-00-16-3e-12-34-57
    # PXELINUX option IPAPPEND 2 in pxelinux.cfg appends MAC address
    # of the booting node
    # BOOTIF=link - take first eth for which ethtool reports link
    # BOOTIF=eth* e.g. BOOTIF=eth0 - use given interface
    bootif=

    #   ovirt_init=[usb|scsi[:serial#]|/dev/...]
    # local installation target disk
    # usb|scsi - select disk type, as reported by udev ID_BUS
    # serial# - select exact disk using serial number, as reported by
    #           udev ID_SERIAL
    # e.g. ovirt_init=usb:Generic_STORAGE_DEVICE_0000145418-0:0
    # /dev/... - use specified disk device
    #            (for cases when HAL doesn't handle it)
    # w/o value - grab the first disk (/dev/?da)
    init=

    #   ovirt_vol=BOOT_MB:SWAP_MB:ROOT_MB:CONFIG_MB:LOGGING_MB:DATA_MB
    # local partition sizes in MB
    vol_boot_size=
    vol_swap_size=
    vol_root_size=
    vol_config_size=
    vol_logging_size=
    # data size can be set to 0 to disable data partition, -1 to use
    # remaining free space after the other above partitions are defined
    # or a specific positive number in MB
    vol_data_size=

    #   ovirt_upgrade
    # install/update oVirt Node image on the local installation target disk
    upgrade=

    #   ovirt_overcommit=<overcommit_ratio>
    # set the swap size coefficient
    overcommit=

    #   ovirt_standalone
    # force oVirt Node standalone mode
    standalone=

    #   ovirt_firstboot
    # force firstboot configuration even if it has already been run
    # in auto-install mode, overwrite the disk chosen by ovirt_init parameter
    firstboot=

    #   rescue
    # enter emergency shell for fixing configuration issues
    rescue=

    #   pxelinux format: ip=<client-ip>:<boot-server-ip>:<gw-ip>:<netmask>
    #   anaconda format: ip=<client-ip> netmask=<netmask> gateway=<gw-ip>
    #   ipv6=dhcp|auto
    #   dns=server[,server]
    #   ntp=server[,server]
    #   vlan=id
    #   ssh_pwauth=[0|1]
    # static network configuration
    ip_address=
    ip_gateway=
    ip_netmask=
    vlan=
    netmask=
    gateway=
    ipv6=
    dns=
    ntp=
    ssh_pwauth=

    # hostname=fqdn
    # hostname
    hostname=

    #   syslog=server[:port]
    # default syslog server
    syslog_server=
    syslog_port=

    #   collectd=server[:port]
    # default collectd server
    collectd_server=
    collectd_port=

    # save boot parameters like console= for local disk boot menu
    bootparams=
    cat /etc/system-release >> $OVIRT_LOGFILE

    for i in $(cat /proc/cmdline); do
        case $i in
            BOOTIF=*)
            i=${i#BOOTIF=}
            case "$i" in
                eth*)
                bootif=$i
                ;;
                link)
                for eth in $(cd /sys/class/net; echo eth*); do
                    if ethtool $eth 2>/dev/null|grep -q "Link detected: yes"
                    then
                        bootif=$eth
                        break
                    fi
                done
                ;;
                ??-??-??-??-??-??-??)
                i=${i#??-}
                bootif=$(grep -il $(echo $i|sed 's/-/:/g') /sys/class/net/eth*/address|rev|cut -d/ -f2|rev)
                ;;
            esac
            ;;
            ovirt_init*)
            i=${i#ovirt_init}
            if [ -n "$i" ]; then
                # resolve to disk device
                case "$i" in
                    =scsi*)
                    bus=scsi
                    i=${i#=scsi}
                    serial=${i#:}
                    ;;
                    =usb*)
                    bus=usb
                    i=${i#=usb}
                    serial=${i#:}
                    ;;
                    =/dev/*)
                    bus=
                    serial=
                    i=${i#=}
                    init=$(ls -1 "$i" 2>/dev/null | head -n1)
                    ;;
                    *)
                    bus=
                    serial=
                    init=
                    ;;
                esac
                if [ -n "$bus" ]; then
                    init=$(find_disk $bus $serial)
                fi
            else
                # 'ovirt_init' without value: grab first disk
                init=$(ls -1 /dev/?da 2>/dev/null |head -n1)
            fi
            if [ -z "$init" ]; then
                log "Selected disk $i is not valid."
            fi
            ;;
            ovirt_vol=*)
            i=${i#ovirt_vol=}
            eval $(printf $i|awk -F: '{print "vol_boot_size="$1; print "vol_swap_size="$2; print "vol_root_size="$3; print "vol_config_size="$4; print "vol_logging_size="$5; print "vol_data_size="$6;}')
            ;;
            ovirt_upgrade* |ovirt_local_boot*)
            upgrade=1
            ;;
            ovirt_standalone*)
            standalone=1
            bootparams="$bootparams $i"
            ;;
            ovirt_firstboot=no | ovirt_firstboot=0)
            firstboot=0
            ;;
            ovirt_firstboot*)
            firstboot=1
            ;;
            rescue)
            rescue=1
            ;;

            ovirt_overcommit*)
            i=${i#ovirt_overcommit=}
            eval $(printf $i|awk -F: '{print "overcommit="$1;}')
            ;;

            ip=*)
            i=${i#ip=}
            eval $(printf $i|awk -F: '{print "ip_address="$1; print "ip_gateway="$3; print "ip_netmask="$4}')
            ;;
            netmask=*)
            netmask=${i#netmask=}
            ;;
            gateway=*)
            gateway=${i#gateway=}
            ;;
            ipv6=*)
            ipv6=${i#ipv6=}
            ;;
            dns=*)
            dns=${i#dns=}
            ;;
            ntp=*)
            ntp=${i#ntp=}
            ;;
            hostname=*)
            hostname=${i#hostname=}
            ;;
            vlan=*)
            vlan=${i#vlan=}
            ;;
            ssh_pwauth=1 | ssh_pwauth=true)
            ssh_pwauth=true
            ;;
            ssh_pwauth=0 | ssh_pwauth=false)
            ssh_pwauth=false
            ;;
            syslog=*)
            i=${i#syslog=}
            eval $(printf $i|awk -F: '{print "syslog_server="$1; print "syslog_port="$2;}')
            ;;
            collectd=*)
            i=${i#collectd=}
            eval $(printf $i|awk -F: '{print "collectd_server="$1; print "collectd_port="$2;}')
            ;;
            console=*)
            bootparams="$bootparams $i"
            ;;
            ovirt_early=*)
            i=${i#ovirt_early=}
            ovirt_early=$(echo $i|tr ",:;" " ")
            ;;
        esac
    done

    for hook in $ovirt_early; do
        pre="$EARLY_DIR/pre-$hook"
        if [ -e "$pre" ]; then
            . "$pre"
        fi
    done

    if [ -z "$ip_netmask" ]; then
        ip_netmask=$netmask
    fi
    if [ -z "$ip_gateway" ]; then
        ip_gateway=$gateway
    fi
    # save boot parameters as defaults for ovirt-config-*
    params="bootif init vol_boot_size vol_swap_size vol_root_size vol_config_size vol_logging_size vol_data_size upgrade standalone overcommit ip_address ip_netmask ip_gateway ipv6 dns ntp vlan ssh_pwauth syslog_server syslog_port collectd_server collectd_port bootparams hostname firstboot"
    # mount /config unless firstboot is forced
    if [ "$firstboot" != "1" ]; then
        mount_config
    fi
    log "Updating $OVIRT_DEFAULTS"
    tmpaug=$(mktemp)
    for p in $params; do
        PARAM=$(uc $p)
        value=$(ptr $p)
        if [ -n "$value" ]; then
            log "Updating OVIRT_$PARAM to '$value'"
            echo "set /files$OVIRT_DEFAULTS/OVIRT_$PARAM '\"$value\"'" \
                >> $tmpaug
        fi
    done
    augtool $tmpaug

    if [ -f /etc/sysconfig/network ]; then
        . /etc/sysconfig/network
        if [ -n "$HOSTNAME" ]; then
            hostname $HOSTNAME
        fi
    fi

    if [ "$rescue" = 1 ]; then
        log "Rescue mode requested, starting emergency shell"
        stop_log
        plymouth --hide-splash
        bash < /dev/console
        plymouth --show-splash
        start_log
    fi

    if [ "$standalone" = 1 ]; then
        # In standalone mode, fix libvirt to not use gssapi
        sed -c -i -e s/^keytab/#keytab/ \
            -e "s/^mech_list: .*gssapi.*/mech_list: digest-md5/" \
            /etc/sasl2/libvirt.conf
    else
       configure_management_interface
       fi

    rm -f $VAR_SUBSYS_OVIRT_EARLY

    for hook in $ovirt_early; do
        post="$EARLY_DIR/post-$hook"
        if [ -e "$post" ]; then
            . "$post"
        fi
    done

    return 0
}

stop() {
    echo -n "Stopping ovirt-early: "
    success
}

case "$1" in
    start)
        [ -f "$VAR_SUBSYS_NODE_CONFIG" ] && exit 0
        echo -n "Starting ovirt-early: "
        {
            log "Starting ovirt-early"
            start
            log "Completed ovirt-early"
            RETVAL=$?
        } >> $OVIRT_LOGFILE 2>&1
        test $RETVAL == 0 && success || failure
        ;;
    status)
        status $prog
        ;;
    reload)
        stop
        start
        ;;
    stop)
        stop
        ;;
    *)
        echo "Usage: ovirt-early {start}"
        RETVAL=2
esac

exit $RETVAL
