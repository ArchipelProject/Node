#!/bin/bash
#
# To automate the partitioning, pass in the specific fields in this order
# ovirt-config-storage [swap size] [boot size] [root size] [logging size] [data size]
#
# All sizes are in megabytes
#

. /usr/libexec/ovirt-functions

ME=$(basename "$0")
warn() { printf '%s: %s\n' "$ME" "$*" >&2; }
die() { warn "$*"; exit 1; }

trap '__st=$?; stop_log; exit $__st' 0
trap 'exit $?' 1 2 13 15

# check that we're not booted from local storage; if so then exit with an error
if is_booted_from_local_disk; then
    die "You cannot configure storage on a running system. Please boot from CD/USB to configure storage."
fi

default_overcommit=0.5
default_boot_size=50
default_root_size=256
default_config_size=5
default_logging_size=2048
# -1 indicates data partition should use remaining disk
default_data_size=-1
boot_min_size=50
root_min_size=256
config_min_size=5
logging_min_size=5
data_min_size=5
swap_min_size=5

# return sd name for given #:# identifier
get_sd_name() {
    local id="$1"
    local device_var="$2"
    local device_sys=$(grep -H "^$id$" /sys/block/*/dev | cut -d: -f1)

    if [ -n "$device_sys" ]; then
        eval $device_var=$(basename $(dirname "$device_sys"))
        return
    fi
    eval $device_var=1
}

# gets the dependent block devices for multipath devices
get_multipath_devices() {
    local mpath_device=mpath-$(basename "$1")
    local deplist_var="$2"
    local deplist=""

    #get dependencies for multipath device
    local deps=$(dmsetup deps -u "$mpath_device" \
    | sed -r 's/\(([0-9]+), ([0-9]+)\)/\1:\2/g' \
    | sed 's/ /\n/g' | grep [0-9]:[0-9] )

    local device=""
    for dep in "$deps"
    do
        local device=""
        get_sd_name "$dep" device
        if [[ ! "$device" = 1 ]]; then
            if [[ "$deplist" = "" ]]; then
                deplist="$device"
            else
                deplist="$deplist $device"
            fi
        fi
    done

    eval $deplist_var='$deplist'
}

#get Multipath device for given /dev/sdX device
#return sdX device if no multipath device
translate_multipath_device() {
    #trim so that only sdX is stored, but support passing /dev/sdX
    local dev="$1"
    local mpath_var="$2"

    if [ -z "$dev" ]; then
        if [ -n "$mpath_var" ]; then
            eval $mpath_var=
        fi
        return
    fi
    if [[ "$dev" =~ "/dev/mapper" ]]; then
        eval $math_var="$dev"
        return
    fi

    local dm_dev=/dev/$(multipath -ll "$dev" | egrep dm-[0-9]+ | sed -r 's/^.& (dm-[0-9]+) .*$/\1/')

    local mpath_device=
    get_dm_device "$dm_dev" mpath_device

    if [ -z "$mpath_device" ]; then
        mpath_device="$dev"
    fi

    eval $mpath_var="$mpath_device"
}


get_drive_size()
{
    local drive="$1"
    local space_var="$2"

    local size=
    local udi=$(hal-find-by-property --key block.device --string "$drive")
    # if more than one UDI was found then iterate over them to find the base device
    if [[ "${udi}" =~ \$  ]]; then
        udi=$(echo "$udi" | sed 's/\$/ /g')
        for found in ${udi}; do
            if [[ "false" == $(hal-get-property --udi "$found" --key block.is_volume) ]]; then
                udi="$found"
                break
            fi
        done
    fi
    if [ -z "$udi" ]; then
        # If hal didn't find the device, it could be a virtio block device
        # or a multipath device
        # In this case, use sfdisk -s to get the size
        size=$(sfdisk -s "$drive" 2>/dev/null)
        if [ -z "$size" ]; then
            size=0
        fi
        size=$(echo "scale=0; $size * 1024" | bc -l)
    else
        size=$(hal-get-property --udi "$udi" --key storage.size)
        if [[ "${size}" == "0" ]]; then
            # disk is probably hot-swappable, use different HAL key
            # but first check that it is removeable media and that  media is present
            if [[ "true" == "$(hal-get-property --udi "$udi" --key storage.removable.media_available)" ]]; then
                size=$(hal-get-property --udi "$udi" --key storage.removable.media_size)
            fi
        fi
    fi

    size=$(echo "scale=0; $size / (1024 * 1024)" | bc -l)
    echo "$drive ($size MB)"
    test -z "$udi" || echo "Disk Identifier: $(basename "$udi")"
    if [ -n "$space_var" ]; then
        eval $space_var="$size"
    fi
}

check_partition_sizes()
{
    local disk_size need_size

    local min_data_size="$DATA_SIZE"
    if [ "$DATA_SIZE" = -1 ]; then
        min_data_size=5
    fi

    printf "\n"
    if [ "$OVIRT_ISCSI_ENABLED" == "y" ]; then
        get_drive_size "$BOOTDRIVE" BOOTDRIVESPACE
        drive_list="BOOT"
        BOOT_NEED_SIZE="$BOOT_SIZE"
    else
        get_drive_size "$ROOTDRIVE" ROOTDRIVESPACE
        get_drive_size "$HOSTVGDRIVE" HOSTVGDRIVESPACE
        ROOT_NEED_SIZE=$(echo "scale=0; $ROOT_SIZE * 2"| bc -l)
        HOSTVG_NEED_SIZE=$(echo "scale=0;" \
                         "$SWAP_SIZE + $CONFIG_SIZE + $LOGGING_SIZE + $min_data_size" | bc -l)

        if [ "$ROOTDRIVE" == "$HOSTVGDRIVE" ]; then
            drive_list="ROOT"
            ROOT_NEED_SIZE=$(echo "scale=0; $ROOT_SIZE * 2 + $HOSTVG_NEED_SIZE"| bc -l)
        else
            drive_list="ROOT HOSTVG"
        fi
    fi

    for drive in $drive_list; do
        drive_need_size=$(eval "echo \${$(echo ${drive}_NEED_SIZE)"})
        drive_disk_size=$(eval "echo \${$(echo ${drive}DRIVESPACE)"})

        if [ $drive_need_size -gt $drive_disk_size ]; then
            local gap_size=$(echo "scale=0; $drive_need_size-$drive_disk_size;" | bc -l)
            printf "\n"
            printf "=============================================================\n"
            printf "The target storage device is too small for the desired sizes:\n"
            printf " Disk Target: $drive \n"
            printf " Size of target storage device: $drive_disk_size MB\n"
            printf " Total storage size to be used: $drive_need_size MB\n"
            printf "\n"
            printf "You need an additional $gap_size MB of storage.\n"
            printf "\n"
            return 1
        else
            printf "Required Space : $drive_need_size MB\n\n"
        fi
    done

    # check if an existing HostVG exists on a device other than the target
    if [ "$OVIRT_ISCSI_ENABLED" != "y" ]; then
        devices="$(pvs -o pv_name,vg_name --noheadings | \
            grep "HostVG"|grep -v "$HOSTVGDRIVE"|awk '{ print $1 }')"
        rc=0
        if [ -n "$devices" ]; then
            printf "\n"
            printf "There appears to already be an installation on another device:\n"
            for device in $devices; do
                udi=$(hal-find-by-property --key block.device --string $device)
                printf "\t$device ($(basename "$udi"))\n"
            done
            printf "We cannot proceed until either device is removed from the system\n"
            printf "or until the HostVG volume group is removed.\n"
            printf "\nTo re-install the node, please select \"Uninstall Node\" from the main\n"
            printf "menu and then try to partition.\n"
            printf "\n"
            rc=1
        fi
    else
        rc=0
    fi

    return $rc
}

manual_input()
{
    local manual_device
    local return_var="$1"
    while true; do
        read -rp "Enter disk device path: " manual_device
        if [ -z "$device" ]; then
            echo "Aborting."
            return 1
        fi
        translate_multipath_device "$manual_device" manual_device
        if [ -n "$manual_device" ]; then
            if [ -b "$(readlink -f "$device")" ]; then
                eval $return_var="$manual_device"
                return 0
            fi
        else
            echo "Aborting."
            return 1
        fi

    done
}

# Find a usable/selected storage device.
# If there are none, give a diagnostic and return nonzero.
# If there is just one, e.g., /dev/sda, treat it as selected (see below).
# and return 0.  If there are two or more, make the user select one
# or decline.  Upon decline, return nonzero. Otherwise, print the
# selected name, then return 0.
# Sample output: /dev/sda
get_dev_name()
{
    local udi_list=$(hal-find-by-capability --capability storage)
    local byid_list=$(find /dev/disk/by-id -mindepth 1 -not -name '*-part*' 2>/dev/null)
    if test -z "$udi_list" -a -z "$byid_list"; then
        warn "ERROR: no usable storage devices detected"
        return 1
    fi

    local d devices sizes
    for d in $udi_list; do
        local drive_type=$(hal-get-property --udi "$d" --key storage.drive_type)
        test "X$drive_type" = Xdisk || continue
        local block_dev=$(hal-get-property --udi "$d" --key block.device)
        # Must start with a '/'.
        case "$block_dev" in
            *' '*)
                # we use space as separator
                warn "block device name '$block_dev' contains space; skipping";
                continue;;
            /*) ;;
            *) warn "block device name $block_dev doesn't start with '/';" \
                " skipping"; continue;;
        esac
        test -z "$devices" \
            && devices="$block_dev" \
            || devices="$devices $block_dev"
    done
    d=""
    for d in $byid_list; do
        devices="$devices $(readlink -f "$d")";
    done

    # FIXME: workaround for detecting virtio block devices
    devices="$devices $(ls /dev/vd? 2> /dev/null | xargs)"

    # FIXME: workaround for detecting cciss devices
    for dev in $(ls /dev/cciss 2>/dev/null); do
        if [[ ! "$dev" =~ p[0-9]+\$ ]]; then
            devices="$devices /dev/cciss/dev"
        fi
    done

    # Include mulitpath devices
    local devs_to_remove
    for dev in $(dmsetup ls --target=multipath | awk '{print $1}'); do
        devices="$devices /dev/mapper/$dev"
        local sd_devs=""
        get_multipath_devices "$dev" sd_devs
        local dm_dev=$(multipath -ll "$dev" | grep "$dev" | sed -r 's/^.*(dm-[0-9]+ ).*$/\1/')
        devs_to_remove="${devs_to_remove} ${sd_devs} $dm_dev"
    done

    # Remove /dev/sd* devices that are part of a multipath device
    local dev_list
    for dev in $devices
    do
        if [[ ! "$devs_to_remove" =~ "$(basename $dev) " ]]; then
            dev_list="$dev_list $dev"
        fi
    done

    devices=$(echo $dev_list | tr ' ' '\n' | sort -u | xargs)

    local num_devices=$(echo "$devices" | wc -w)
    # If there's only one device, use it.
    case $num_devices in
        0) warn "ERROR: found no usable block device"; return 1;;
        1) echo "$devices"; return 0;;
        *) ;; # found more than one
    esac

    # There are two or more; make the user choose.
    # display description for each disk
    for d in $devices; do
        get_drive_size "$d" >&2
    done
    local choices="$devices Abort"
    select device in $choices "Manual Selection"
    do
        test "$device" = Abort && return 1
        test "$device" = "Manual selection" && manual_input device
        test -z "$device" && continue
        echo "$device"
        return 0
    done
}

do_configure()
{
    local name_and_size
    if [ "$OVIRT_ISCSI_ENABLED" == "y" ]; then
        printf "\n\nPlease select the disk to use for the Boot partition.\n\n"
        BOOTDRIVE=$(get_dev_name) || return 0
        get_drive_size "$BOOTDRIVE" BOOTDRIVESPACE
        echo "$BOOTDRIVE"
    else
        printf "\n\nPlease select the disk to use for the Root.\n\n"
        ROOTDRIVE=$(get_dev_name) || return 0
        get_drive_size "$ROOTDRIVE" ROOTDRIVESPACE

        printf "\n\nPlease select the disk to use for the HostVG.\n\n"
        HOSTVGDRIVE=$(get_dev_name) || return 0
        local skipped=false
        if check_existing_hostvg "$HOSTVGDRIVE" devs; then
            for dev in $devs
            do
                printf "Removing HostVG on $dev will erase the drive and cannot be undone\n"
                if ask_yes_or_no "Do you want to remove HostVG from $dev (y/n)?"; then
                    start_log
                    if ! wipe_lvm_on_disk "$dev"; then
                        stop_log
                        return 1
                    fi
                    stop_log
                else
                    skipped=true
                fi
            done
        fi
        $skipped  && printf "Installation cannot proceed with existing HostVG.\n" && return 0
        get_drive_size "$HOSTVGDRIVE" HOSTVGDRIVESPACE
        echo "$HOSTVGDRIVESPACE"
    fi
    printf "\n\nPlease configure storage partitions.\n\n"
    printf "* Enter partition sizes in MB.\n"
    printf "* A value of 0 indicates the partition should be disabled.\n"
    printf "* If the partition is enabled, it will have a minimum valid size.\n"
    printf "* Size remaining value is approximate due to cylinder rounding\n"
    printf "  during partitioning.\n"
    printf "* For the Data partition, a size of -1 indicates that the\n"
    printf "  partition should use up the remaining space on the disk.\n\n"

    if do_review; then
        if ask_yes_or_no "Use these default values ([Y]es/[N]o)?"; then
            return
        fi
    else
        printf "Selected disk is too small for default storage configuration"
    fi

    local space_left=$HOSTVGDRIVESPACE
    if [ "$OVIRT_ISCSI_ENABLED" == "y" ]; then
        partlist="boot" # swap root config logging data"
        local space_left=$BOOTDRIVESPACE
    else
        partlist="swap root config logging data"
    fi
    for part in $partlist ; do
        part_regexp="^0$"
        if [ "$part" = "data" ]; then
            part_regexp="^\-1|0$"
        fi
        uc=$(echo $part|tr '[[:lower:]]' '[[:upper:]]')
        size_var=${uc}_SIZE
        eval "size=\$$size_var"
        min_size_var=${part}_min_size
        eval "min_size=\$$min_size_var"

        while true; do
            printf "\n"
            read -ep "Change $part partition size. (Def. ${size}MB), Min. ${min_size}MB, Max. ~${space_left}MB? or Q to quit "
            mb_input=$REPLY
            test -z "$mb_input" && mb_input=$size
            local size_used=0
            if [[ $mb_input == "q" || $mb_input == "Q" ]]; then
                printf "Aborting"
                return
            elif [[ $mb_input =~ ^-*[0-9]+$ ]]; then
                if [[ $mb_input -ge $min_size || $mb_input =~ $part_regexp ]] \
                    && [[ $mb_input -le $space_left ]] ; then
                    eval "$size_var=$mb_input"
                    size_used=$mb_input
                    break;
                else
                    printf "invalid $part size: $mb_input.  "
                    printf "Does not fall into specified range.\n"
                fi
            else
                printf "invalid $part size: '$mb_input'.\n"
            fi
        done
        space_left=$(echo "scale=0;$space_left - $size_used" | bc -l)
    done

    if ! check_partition_sizes; then
        printf "Please try partitioning again.\n"
        ROOTDRIVE=
        return 1
    fi

    # save input variables
    augtool <<EOF
set /files$OVIRT_DEFAULTS/OVIRT_INIT $ROOTDRIVE
set /files$OVIRT_DEFAULTS/OVIRT_VOL_BOOT_SIZE $BOOT_SIZE
set /files$OVIRT_DEFAULTS/OVIRT_VOL_SWAP_SIZE $SWAP_SIZE
set /files$OVIRT_DEFAULTS/OVIRT_VOL_ROOT_SIZE $ROOT_SIZE
set /files$OVIRT_DEFAULTS/OVIRT_VOL_CONFIG_SIZE $CONFIG_SIZE
set /files$OVIRT_DEFAULTS/OVIRT_VOL_LOGGING_SIZE $LOGGING_SIZE
set /files$OVIRT_DEFAULTS/OVIRT_VOL_DATA_SIZE $DATA_SIZE
EOF

   if [ -n "$BOOTDRIVE" ]; then
       augtool <<EOF
set /files$OVIRT_DEFAULTS/OVIRT_BOOT_INIT $BOOTDRIVE
EOF
   fi
}

do_review()
{
    if [[ -z "$ROOTDRIVE" && "$OVIRT_ISCSI_ENABLED" != "y" ]]; then
        printf "\nNo Root storage device selected.\n"
        return 1
    fi
    local is_negative=0

    if [ "$OVIRT_ISCSI_ENABLED" != "y" ]; then
        local data_size_display="$DATA_SIZE MB"
        if [ "$DATA_SIZE" = -1 ]; then

            if [ "$ROOTDRIVE" == "$HOSTVGDRIVE" ]; then
                local remaining_mb=$(( $ROOTDRIVESPACE - $SWAP_SIZE \
                        - $ROOT_SIZE * 2 - $CONFIG_SIZE - $LOGGING_SIZE ))
                test $remaining_mb -lt 0 && is_negative=1
            else
                local remaining_mb=$(( $HOSTVGDRIVESPACE - $SWAP_SIZE - $CONFIG_SIZE - $LOGGING_SIZE ))
                test $remaining_mb -lt 0 && is_negative=1
            fi
            data_size_display="$remaining_mb MB"
        fi

        cat <<EOF

The selected disk will be repartitioned as follows:
================================================
                   Root Drive: $(get_drive_size "$ROOTDRIVE")
                 HostVG Drive: $(get_drive_size "$HOSTVGDRIVE")
          Swap partition size: $SWAP_SIZE MB
  Installation partition size: $ROOT_SIZE * 2 MB
 Configuration partition size: $CONFIG_SIZE MB
       Logging partition size: $LOGGING_SIZE MB
          Data partition size: $data_size_display

EOF
    else
        cat <<EOF

The selected disk will be repartitioned as follows:
================================================
                   Boot Drive: $(get_drive_size "$BOOTDRIVE")
          Boot partition size: $BOOT_SIZE

EOF

    fi

    return ${is_negative-0}
}

#Check for an existing HostVG on any device on the system.
# Return 0 if then is a HostVG found, unless only one found is on $1
# Return 1 if no HostVG found or only found on $1
check_existing_hostvg()
{
    local install_dev=$1
    local devices_var=$2
    if [ -z "$install_dev" ]; then
        devices="$(pvs -o pv_name,vg_name --noheadings | \
            grep "HostVG" | awk '{print $1}' )"
    else
        devices="$(pvs -o pv_name,vg_name --noheadings | \
            grep -v "${install_dev}" | grep "HostVG" | awk '{print $1}' )"
    fi
    rc=1
    if [ -n "$devices" ]; then
        printf "\n"
        printf "There appears to already be an installation on another device:\n"
        for device in $devices; do
            get_multipath_devices ${device%p[0-9]} sd_dev
            sd_dev=$(echo "$sd_dev" | awk '{print $1}')
            udi=$(hal-find-by-property --key block.device --string /dev/${sd_dev})
            printf "\t$device ($(basename "$udi"))\n"
        done
        printf "The installation cannot proceed until the device is removed\n"
        printf "from the system of the HostVG volume group is removed.\n"
        rc=0
    fi

    test -z "$devices_var" || eval "$devices_var"="$devices"

    return $rc

}

# cleanup lvms on selected disk
# - remove mounted filesystems
# - remove LVM volumes and groups
wipe_lvm_on_disk()
{
    local dev=${1-$HOSTVGDRIVE}
    unmount_logging
    local part_delim="p"
    if [[ "$dev" =~ "/dev/sd" ]]; then
        part_delim=""
    fi
    for vg in $(pvs -o vg_uuid --noheadings "$dev" "$dev${dev_delim}[0-9]"* 2>/dev/null|sort -u); do
        if pvs -o pv_name,vg_uuid --noheadings | \
            grep "$vg" | egrep -v -q "${dev}${part_delim}[0-9]+|${dev} " 2>/dev/null; then
            log "The volume group \"$vg\" spans multiple disks."
            log "This operation cannot complete.  Please manually"
            log "cleanup the storage using standard linux tools."
            return 1
        fi
        wipe_volume_group $vg
    done
    return 0
}


reread_partitions()
{
    local drive=$1
    if [[ $drive =~ "/dev/mapper" ]]; then
        kpartx -a -p p $drive
    else
        blockdev --rereadpt "$drive"
    fi
}

perform_partitioning()
{
    if [[ -z "$HOSTVGDRIVE" && "$OVIRT_ISCSI_ENABLED" != "y" ]]; then
        printf "\nNo storage device selected.\n"
        return
    fi

    if [[ -z "$BOOTDRIVE" && "$OVIRT_ISCSI_ENABLED" == "y" ]]; then
        printf "\nNo storage device selected.\n"
        return
    fi
    start_log

    log "Saving parameters"
    unmount_config /etc/default/ovirt

    log "Removing old LVM partitions"
    wipe_lvm_on_disk $HOSTVGDRIVE
    wipe_lvm_on_disk $ROOTDRIVE

    # begin critical section
    set -e

    MEM_SIZE_MB=$(echo "scale=0; $MEM_SIZE_MB / 1024;" | bc -l)
    local boot_size_si=$(echo "scale=0; $BOOT_SIZE * (1024 * 1024) / (1000 * 1000)" | bc -l)

    if [ "$OVIRT_ISCSI_ENABLED" == "y" ]; then
        log "Partitioning drive: $BOOTDRIVE"
        log "Wiping old boot sector"
        dd if=/dev/zero of=$BOOTDRIVE bs=1024K count=1
        reread_partitions "$BOOTDRIVE"
        partprobe -s "$BOOTDRIVE"
        log "Creating boot partition"
        parted "$BOOTDRIVE" -s "mklabel ${LABEL_TYPE}"
        parted "$BOOTDRIVE" -s "mkpartfs primary ext2 0M ${boot_size_si}M"
        reread_partitions "$BOOTDRIVE"
        partboot="${BOOTDRIVE}1"
        if [ ! -e "$partboot" ]; then
            partboot="${BOOTDRIVE}p1"
        fi
        # sleep to ensure filesystems are created before continuing
        sleep 10
        mke2fs "${partboot}" -L Boot
        tune2fs -c 0 -i 0 ${partboot}
        log "Completed!"
        return
    fi

    log "Starting partitioning of $ROOTDRIVE"
    log "Partitioning drive: $ROOTDRIVE"
 # FIXME: save a backup copy, just in case?
    log "Wiping old boot sector"
    dd if=/dev/zero of="$ROOTDRIVE" bs=1024K count=1
    reread_partitions "$ROOTDRIVE"
    partprobe -s "$ROOTDRIVE"
    log "Labeling Drive: $ROOTDRIVE"
    parted "$ROOTDRIVE" -s "mklabel ${LABEL_TYPE}"

    if [ "$ROOTDRIVE" != "$HOSTVGDRIVE" ]; then
        log "Labeling Drive: $HOSTVGDRIVE"
        parted "$HOSTVGDRIVE" -s "mklabel ${LABEL_TYPE}"
    fi
    log "Creating Root and RootBackup Partitions"
    let RootBackup_end=${ROOT_SIZE}*2
    parted $ROOTDRIVE -s "mkpart primary ext2 0M ${ROOT_SIZE}M"
    parted $ROOTDRIVE -s "mkpart primary ext2 ${ROOT_SIZE}M ${RootBackup_end}M"
    reread_partitions $ROOTDRIVE
    partroot="${ROOTDRIVE}1"
    partrootbackup="${ROOTDRIVE}2"
    if [ ! -e "$partroot" ]; then
        partroot="${ROOTDRIVE}p1"
        partrootbackup="${ROOTDRIVE}p2"
    fi
    # sleep to ensure filesystems are created before continuing
    sleep 10
    mke2fs "${partroot}" -L Root
    mke2fs "${partrootbackup}" -L RootBackup
    tune2fs -c 0 -i 0 "${partroot}"
    tune2fs -c 0 -i 0 "${partrootbackup}"
    log "Creating LVM partition"

    if [ "$ROOTDRIVE" == "$HOSTVGDRIVE" ]; then
        parted $HOSTVGDRIVE -s "mkpart primary ext2 ${RootBackup_end}M -1"
        hostvgpart="3"
    else
        parted "$HOSTVGDRIVE" -s "mkpart primary ext2 0M -1"
        hostvgpart="1"
    fi
    log "Toggling LVM on"
    parted "$HOSTVGDRIVE" -s "set $hostvgpart lvm on"
    parted "$ROOTDRIVE" -s "print"
    udevadm settle 2> /dev/null || udevsettle
    reread_partitions "$HOSTVGDRIVE"

    # sync GPT to the legacy MBR partitions
    if [ "gpt" == "$LABEL_TYPE" ]; then
        log "Running gptsync to create legacy mbr"
        gptsync "$ROOTDRIVE"
    fi

    partpv="${HOSTVGDRIVE}${hostvgpart}"
    if [ ! -e "$partpv" ]; then
        # e.g. /dev/cciss/c0d0p2
        partpv="${HOSTVGDRIVE}p${hostvgpart}"
    fi
    log "Creating physical volume"
    if [ ! -e "$partpv" ]; then
        log "$partpv is not available!"
        exit 1
    fi
    dd if=/dev/zero of=${partpv} bs=1024k count=1
    pvcreate -ff -y "${partpv}"
    log "Creating volume group"
    vgcreate /dev/HostVG "${partpv}"

    if [ "$SWAP_SIZE" -gt 0 ]; then
        log "Creating swap partition"
        lvcreate --name Swap --size ${SWAP_SIZE}M /dev/HostVG
        mkswap -L "SWAP" /dev/HostVG/Swap
        echo "/dev/HostVG/Swap swap swap defaults 0 0" >> /etc/fstab
    fi
    if [ "$CONFIG_SIZE" -gt 0 ]; then
        log "Creating config partition"
        lvcreate --name Config --size ${CONFIG_SIZE}M /dev/HostVG
        mke2fs -j /dev/HostVG/Config -L "CONFIG"
        tune2fs -c 0 -i 0 /dev/HostVG/Config
    fi
    if [ "$LOGGING_SIZE" -gt 0 ]; then
        log "Creating log partition"
        lvcreate --name Logging --size ${LOGGING_SIZE}M /dev/HostVG
        mke2fs -j /dev/HostVG/Logging -L "LOGGING"
        tune2fs -c 0 -i 0 /dev/HostVG/Logging
        echo "/dev/HostVG/Logging /var/log ext3 defaults,noatime 0 0" >> /etc/fstab
    fi

    local use_data=1
    if [ "$DATA_SIZE" -eq -1 ]; then
        log "Creating data partition with remaining free space"
        lvcreate --name Data -l 100%FREE /dev/HostVG
        use_data=0
    elif [ "$DATA_SIZE" -gt 0 ]; then
        log "Creating data partition"
        lvcreate --name Data --size ${DATA_SIZE}M /dev/HostVG
        use_data=0
    fi

    if [ "$use_data" = 0 ]; then
        mke2fs -j /dev/HostVG/Data -L "DATA"
        tune2fs -c 0 -i 0 /dev/HostVG/Data
        echo "/dev/HostVG/Data /data ext3 defaults,noatime 0 0" >> /etc/fstab
        echo "/data/images /var/lib/libvirt/images bind bind 0 0" >> /etc/fstab
        echo "/data/core /var/log/core bind bind 0 0" >> /etc/fstab
    fi

    # end critical section
    set +e

    log "Mounting config partition"
    if mount_config; then
        ovirt_store_config /etc/fstab
    fi

    mount_logging
    if [ "$use_data" = 0 ]; then
        log "Mounting data partition"
        mount_data
    fi
    log "Completed!"

    stop_log
}

do_confirm()
{

    if [[ -z "$ROOTDRIVE" && "$OVIRT_ISCSI_ENABLED" != "y" ]]; then
        printf "\nNo storage device selected.\n"
        return
    fi

    while true; do
        sp='                                                    '
        w='!!WARNING'
        wb="$w"'!!'
        w8="$w$w$w$w$w$w$w$w"
        printf '%s!!\n' \
          "$w8" \
          "$w8" \
          "$wb$sp$w" \
          "$wb$sp$w" \
          "$wb    If you proceed, all data on your selected storage  $w" \
          "$wb    device will be destroyed and your hard disk        $w" \
          "$wb    will be irreversably reconfigured                  $w" \
          "$wb$sp$w" \
          "$wb$sp$w" \
        "$w8" \
        "$w8"

        if ask_yes_or_no "Do you wish to proceed ([Y]es/[N]o)?"; then
            if check_partition_sizes; then
                perform_partitioning
                exit 0
            fi
        else
            return
        fi
        # store networking config since it was created before storage was established for iscsi targets
        if [ "$OVIRT_ISCSI_NETWORKING" == "y" ]; then
            ovirt_store_config \
        /etc/sysconfig/network-scripts/ifcfg* \
        /etc/ntp.conf
        fi
    done
}

do_iscsi_target()
{
if ! network_up ; then
    printf "Networking must be configured prior to configuring an iscsi target.\n\n"
    # allow network config without setting up storage first
    augtool <<EOF
set /files/etc/default/ovirt/OVIRT_ISCSI_NETWORK_CONFIG y
EOF
    exit 99
fi

while true; do
    OPTIONS="\"Target IP\" \"Target Port\"" #\"CHAP Username\" \"CHAP Password\""
    printf "\nPress Enter to leave option blank or Q to quit (default Target Port is 3260)\n"
    eval set $OPTIONS
    PS3="Choose an option: "
    for OPTION in "$@"; do
        while true; do
            read -ep "Enter $OPTION: "
            if [[ "$REPLY" == "q" || "$REPLY" == "Q" ]]; then
                return
            fi

            if [ "$OPTION" == "Target IP" ]; then
                OVIRT_ISCSI_TARGET_IP="$REPLY"
                if [ -n "$REPLY" ]; then
                    break;
                fi

            elif [ "$OPTION" == "Target Port" ]; then
                OVIRT_ISCSI_TARGET_PORT="$REPLY"
                if [ -z "$REPLY" ]; then
                    OVIRT_ISCSI_TARGET_PORT="3260"
                    break;
                else
                    break;
                fi

            elif [ "$OPTION" == "CHAP Username" ]; then
                OVIRT_ISCSI_CHAP_USERNAME="$REPLY"
                break

            elif [ "$OPTION" == "CHAP Password" ]; then
                OVIRT_ISCSI_CHAP_PASSWORD="$REPLY"
                break;
            fi
        done
    done

    cat <<EOF

The iSCSI target be configured as follows:
================================================
    Target IP:   $OVIRT_ISCSI_TARGET_IP
  Target Port:   $OVIRT_ISCSI_TARGET_PORT

EOF
#     Username:   $OVIRT_ISCSI_CHAP_USERNAME
#     Password:   $OVIRT_ISCSI_CHAP_PASSWORD
#EOF

if ask_yes_or_no "Is this correct ([Y]es/[N]o)?" true true; then

    OVIRT_ISCSI_ENABLED="y"
    augtool <<EOF
set /files/etc/default/ovirt/OVIRT_ISCSI_ENABLED y
set /files/etc/default/ovirt/OVIRT_ISCSI_TARGET_IP $OVIRT_ISCSI_TARGET_IP
set /files/etc/default/ovirt/OVIRT_ISCSI_TARGET_PORT $OVIRT_ISCSI_TARGET_PORT
EOF

    if [[ -n "$OVIRT_ISCSI_CHAP_USERNAME" && -n "$OVIRT_ISCSI_CHAP_PASSWORD" ]]; then
        log "setting iscsid.conf username/password"
        augtool <<EOF
set /files/etc/iscsi/iscsid.conf/node.session.auth.authmethod CHAP
set /files/etc/iscsi/iscsid.conf/node.session.auth.username $OVIRT_ISCSI_CHAP_USERNAME
set /files/etc/iscsi/iscsid.conf/node.session.auth.password $OVIRT_ISCSI_CHAP_PASSWORD
set /files/etc/default/ovirt/OVIRT_ISCSI_CHAP_USERNAME $OVIRT_ISCSI_CHAP_USERNAME
set /files/etc/default/ovirt/OVIRT_ISCSI_CHAP_PASSWORD $OVIRT_ISCSI_CHAP_PASSWORD
EOF
    fi

    iscsiadm -p "$OVIRT_ISCSI_TARGET_IP:$OVIRT_ISCSI_TARGET_PORT" -m discovery -t sendtargets
    log "Restarting iscsi service"
    service iscsi restart

ISCSI_NODE_NAMES="$(iscsiadm -m discovery -p $OVIRT_ISCSI_TARGET_IP:$OVIRT_ISCSI_TARGET_PORT -t sendtargets|awk {'print $2'})"

printf "\n\n Select iSCSI target node\n\n" >&2
select OVIRT_ISCSI_NODE_NAME in $ISCSI_NODE_NAMES ; do
log " Selected Node Name: $OVIRT_ISCSI_NODE_NAME"
break;
done

augtool <<EOF
set /files/etc/default/ovirt/OVIRT_ISCSI_ENABLED y
set /files/etc/default/ovirt/OVIRT_ISCSI_TARGET_IP $OVIRT_ISCSI_TARGET_IP
set /files/etc/default/ovirt/OVIRT_ISCSI_TARGET_PORT $OVIRT_ISCSI_TARGET_PORT
set /files/etc/default/ovirt/OVIRT_ISCSI_NODE_NAME $OVIRT_ISCSI_NODE_NAME
EOF
break;
fi
done
}

MEM_SIZE_MB=$(awk '/MemTotal:/ { print $2 }' /proc/meminfo)
case $MEM_SIZE_MB in
    ''|*[^0-9]*) die failed to get system memory size;;
esac
MEM_SIZE_MB=$(echo "scale=0; $MEM_SIZE_MB / 1024;" | bc -l)

overcommit=${OVIRT_OVERCOMMIT:-$default_overcommit}
# we multiply the overcommit coefficient by 10 then divide the
# product by 10 to avoid decimals in the result
OVERCOMMIT_SWAP_SIZE=$(echo "scale=0; (${MEM_SIZE_MB} * (${overcommit} * 10))/10;" | bc -l)

# add to the swap the amounts from http://kbase.redhat.com/faq/docs/DOC-15252
MEM_SIZE_GB=$(echo "scale=0; $MEM_SIZE_MB/1024;" | bc -l)
if [ $MEM_SIZE_GB -le 4 ]; then
    BASE_SWAP_SIZE=2048
elif [ $MEM_SIZE_GB -le 16 ]; then
    BASE_SWAP_SIZE=4096
elif [ $MEM_SIZE_GB -le 64 ]; then
    BASE_SWAP_SIZE=8192
else
    BASE_SWAP_SIZE=16384
fi

CALC_SWAP_SIZE=$(echo "scale=0; ${BASE_SWAP_SIZE} + ${OVERCOMMIT_SWAP_SIZE};" | bc -l)

BOOT_SIZE=${OVIRT_VOL_BOOT_SIZE:-$default_boot_size}
SWAP_SIZE=${OVIRT_VOL_SWAP_SIZE:-$CALC_SWAP_SIZE}
ROOT_SIZE=${OVIRT_VOL_ROOT_SIZE:-$default_root_size}
CONFIG_SIZE=${OVIRT_VOL_CONFIG_SIZE:-$default_config_size}
LOGGING_SIZE=${OVIRT_VOL_LOGGING_SIZE:-$default_logging_size}
DATA_SIZE=${OVIRT_VOL_DATA_SIZE:-$default_data_size}

if [ -n "$OVIRT_INIT" ]; then
    # if present, use the drive selected with 'ovirt_init' boot parameter
    # setting these the same until kernel cmdline argument implemented
    translate_multipath_device "$OVIRT_INIT" DRIVE
    ROOTDRIVE="$DRIVE"
    HOSTVGDRIVE="$DRIVE"
    get_drive_size "$ROOTDRIVE" ROOTDRIVESPACE
fi

# if the node is Fedora then use GPT, otherwise use MBR
if [ -f /etc/fedora-release ]; then
    LABEL_TYPE="gpt"
else
    LABEL_TYPE="msdos"
fi

if [ "$1" == "AUTO" ]; then
    log "Beginning automatic disk partitioning.\n"
    if [ -n "$OVIRT_INIT" ]; then
        # do not format if HostVG exists on selected disk...
        check_existing_hostvg "$HOSTVGDRIVE"
        existingHostVG=$?
        # ... unless overridden by ovirt_firstboot parameter
        if is_firstboot || [ $existingHostVG -ne 0 ]; then
            if check_partition_sizes; then
		        log "Partitioning hard disk..."
                perform_partitioning
                exit $?
            fi
        else
            log "Skip disk partitioning, HostVG exists"
            exit 1
        fi
    else
        log "Missing device parameter: unable to partition any disk"
        exit 2
    fi
else
    OPTIONS="\"Enable iSCSI Target\" \"Configure Storage\" \"Review\" \"Commit Changes And Quit\" \"Return To Menu\""
    eval set $OPTIONS
    PS3="Choose an option: "

    while true; do
        printf "\n\n Storage Configuration\n\n" >&2

        select OPTION in "$@"
        do
            case "$OPTION" in
                "Enable iSCSI Target") do_iscsi_target; break ;;
                "Configure Storage") do_configure ; break ;;
                "Review")    do_review    ; break ;;
                "Commit Changes And Quit") do_confirm   ; break ;;
                "Return To Menu")      printf "\nExiting.\n"; exit ;;
            esac
        done
    done
fi
