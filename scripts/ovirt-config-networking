#!/bin/bash
#
# Iterates over the list of network devices on the node and prompts the user
# to configure each.

. /etc/init.d/ovirt-functions

ME=$(basename "$0")
warn() { printf '%s: %s\n' "$ME" "$*" >&2; }
die() { warn "$*"; exit 1; }

WORKDIR=$(mktemp -d) || exit 1

# Remove $WORKDIR upon interrupt (and HUP, PIPE, TERM) and upon normal
# termination, being careful not to change the exit status.
trap '__st=$?; rm -rf "$WORKDIR"; stop_log; exit $__st' 0
trap 'exit $?' 1 2 13 15

CONFIG_FILE_ROOT="/files/etc/sysconfig/network-scripts/ifcfg"

function configure_interface
{
    local NIC=$1
    local AUTO=$2
    if [[   "$AUTO" == "AUTO"    &&
         -n "$OVIRT_IP_ADDRESS" ]]; then
        IPADDR=$OVIRT_IP_ADDRESS
        NETMASK=$OVIRT_IP_NETMASK
        GATEWAY=$OVIRT_IP_GATEWAY
        PREFIX=$OVIRT_IP_PREFIX
    fi

    local BRIDGE=ovirtbr$NIC
    local IF_FILENAME="$WORKDIR/augtool-$NIC"
    local BR_FILENAME="$WORKDIR/augtool-$BRIDGE"

    printf "\nConfigure $BRIDGE for use by $NIC..\n\n"

    local IF_ROOT="$CONFIG_FILE_ROOT-$NIC"
    local IF_CONFIG="rm $IF_ROOT\nset $IF_ROOT/DEVICE $NIC"

    local BR_ROOT="$CONFIG_FILE_ROOT-$BRIDGE"
    local BR_CONFIG="rm $BR_ROOT\nset $BR_ROOT/DEVICE $BRIDGE"
    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/TYPE bridge"
    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/PEERNTP yes"
    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/DELAY 0"
    IF_CONFIG="$IF_CONFIG\nset $IF_ROOT/BRIDGE $BRIDGE"

    local BR_CONFIG_BASE=$BR_CONFIG

    if [ -z "$AUTO" ]; then
        while true; do
            printf "\n"
            read -ep "Enable IPv4 support ([S]tatic IP, [D]HCP, [N]o or [A]bort)? "
            case $REPLY in
                D|d)
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/BOOTPROTO dhcp"
                    ;;
                S|s)
                    printf "\n"
                    read -ep "IP Address: "; IPADDR=$REPLY
                    read -ep "   Netmask: "; NETMASK=$REPLY
                    read -ep "   Gateway: "; GATEWAY=$REPLY
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/BOOTPROTO none"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPADDR $IPADDR"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/NETMASK $NETMASK"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/GATEWAY $GATEWAY"
                    ;;
                A|a) return ;;
            esac

            printf "\n"
            read -ep "Enable IPv6 support ([S]tatic, [D]HCPv6, A[u]to, [N]o)? "
            case $REPLY in
                S|s)
                    read -ep "IPv6 Address: "; IPADDR=$REPLY
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6INIT yes"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IP6ADDR $IPADDR"
                    ;;
                D|d)
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6INIT yes"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6AUTCONF no"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6FORWARDING no"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/DHCPV6C yes"
                    ;;
                U|u)
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6INIT yes"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6FORWARDING no"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6AUTOCONF yes"
                    ;;
                A|a) return ;;
            esac

            printf "\n"
            read -ep "Is this correct (Y/N/A)? "
            case $REPLY in
                Y|y)
                        IF_CONFIG="$IF_CONFIG\nset $IF_ROOT/ONBOOT yes"
                        BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/ONBOOT yes"

                        printf "$IF_CONFIG\n" > $IF_FILENAME
                        printf "$BR_CONFIG\n" > $BR_FILENAME
                        break
                    ;;
                N|n) BR_CONFIG=$BR_CONFIG_BASE ;;
                A|a) return ;;
            esac
        done
    else
        if [ -n "$OVIRT_IPV6" ]; then
            case "$OVIRT_IPV6" in
                "auto")
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6INIT yes"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6FORWARDING no"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6_AUTOCONF yes"
                    ;;
                "dhcp")
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6INIT yes"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6_AUTOCONF no"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6FORWARDING no"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/DHCPV6C yes"
                    ;;
                *)
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6INIT yes"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6ADDR $OVIRT_IPV6"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6_AUTOCONF no"
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPV6FORWARDING no"
            esac
        fi

        if [ -z "$OVIRT_IP_ADDRESS" ]; then
            BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/BOOTPROTO dhcp"
        else
            if [ "$OVIRT_IP_ADDRESS" != "off" ]; then
                BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/IPADDR $OVIRT_IP_ADDRESS"
                if [ -n "$OVIRT_IP_NETMASK" ]; then
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/NETMASK $OVIRT_IP_NETMASK"
                fi
                if [ -n "$OVIRT_IP_GATEWAY" ]; then
                    BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/GATEWAY $OVIRT_IP_GATEWAY"
                fi
            fi
        fi

        IF_CONFIG="$IF_CONFIG\nset $IF_ROOT/ONBOOT yes"
        BR_CONFIG="$BR_CONFIG\nset $BR_ROOT/ONBOOT yes"

        printf "$IF_CONFIG\n" > $IF_FILENAME
        printf "$BR_CONFIG\n" > $BR_FILENAME
    fi
}

function configure_dns
{
    local DNS=$1
    local AUTO=$2
    if [[   "$AUTO" == "AUTO"    &&
         -n "$OVIRT_DNS" ]]; then
        DNS=$OVIRT_DNS
    fi

    local IF_FILENAME="$WORKDIR/augtool-lo"
    local IF_ROOT="$CONFIG_FILE_ROOT-lo"
    local IF_CONFIG=

    if [ -z "$AUTO" ]; then
        while true; do
            printf "\n"
            echo "Enter up to two DNS servers separated by commas:"
            if [ -n "$OVIRT_DNS" ]; then
                echo "Press Enter for defaults: ($OVIRT_DNS)"
            fi
            read -ep ": "
            DNS=$REPLY

            if [ -z "$DNS" ]; then
                DNS=$OVIRT_DNS
            fi

            printf "\n"
            read -ep "Is this correct (Y/N/A)? "
            case $REPLY in
                Y|y) break ;;
                N|n) ;;
                A|a) return ;;
            esac
        done
    fi

    if [ -n "$DNS" ]; then
        DNS1=$(echo "$DNS" | awk -F, '{print $1}')
        DNS2=$(echo "$DNS" | awk -F, '{print $2}')

        test -n "$DNS1" && IF_CONFIG="set $IF_ROOT/DNS1 $DNS1"
        test -n "$DNS2" && IF_CONFIG="set $IF_ROOT/DNS2 $DNS2"
        printf "$IF_CONFIG\n" > $IF_FILENAME
    fi
}

function setup_menu
{
    NICS=""
    udi_list=$(hal-find-by-capability --capability net.80203)
    if [ -n "$udi_list" ]; then
        for d in $udi_list; do
            NICS="$NICS $(hal-get-property --udi "$d" --key net.interface)"
        done
    fi

    # Add virtio NICs that were possibly not detected by hal
    NICS="$NICS $(ifconfig -a | awk '/Ethernet/ {print $1}' | grep -v "^ovirtbr" | xargs)"
    NICS=$(echo $NICS | tr ' ' '\n' | sort -u | xargs)

    PS3="Please select an interface or configuration option: "
}

if [ "$1" == "AUTO" ]; then
    configure_interface "$OVIRT_BOOTIF" AUTO
    configure_dns "$OVIRT_DNS" AUTO
else
    setup_menu

    while true; do
        printf "\n\n oVirt Node Networking Configuration\n\n" >&2

        select NIC in $NICS "DNS" "Save & Exit"
        do
            printf "\n"
            case "$NIC" in
                "DNS") configure_dns "$OVIRT_DNS"; break ;;
                "Save & Exit") break 2;;
                *) configure_interface $NIC $IFACE_NUMBER; break ;;
            esac
        done
    done
fi

start_log
net_configured=0
if ls "$WORKDIR"/augtool-* > /dev/null 2>&1 ; then
    log "Configuring network"
    config="$WORKDIR"/config-augtool
    cat "$WORKDIR"/augtool-* > $config \
        && augtool $config
    if [ $? = 0 ]; then
        log "Network configured successfully"
        net_configured=1
        ovirt_store_config /etc/sysconfig/network-scripts/ifcfg*
    else
        log "Error configuring network, see $OVIRT_LOGFILE"
        stop_log
        exit 1
    fi
fi
stop_log

if [ "$net_configured" = 1 ]; then
    service network stop > /dev/null 2>&1
    service network start
fi

