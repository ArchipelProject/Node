# -*-Shell-script-*-

OVIRT_LOGFILE=/var/log/ovirt.log

# label of the oVirt partition
OVIRT_LABEL=OVIRT
# configuration defaults
OVIRT_DEFAULTS=/etc/default/ovirt
if [ -f $OVIRT_DEFAULTS ]; then
    . $OVIRT_DEFAULTS
fi
# fallback defaults when sysconfig is empty
OVIRT_STANDALONE=${OVIRT_STANDALONE:-0}

OVIRT_BACKUP_DIR=/var/lib/ovirt-backup

# is_managed
# return 1 if oVirt Node is running in standalone mode
# return 0 if oVirt Node is managed by the oVirt Server
is_managed() {
    return $OVIRT_STANDALONE
}

# is_standalone = not is_managed
is_standalone() {
    if is_managed; then return 1; else return 0; fi
}

# is_auto_install
# return 0 if all required oVirt boot parameters are present
is_auto_install() {
    test -n "$OVIRT_BOOTIF" \
        -a -n "$OVIRT_OVIRT_STANDALONE" \
        -a -n "$OVIRT_INIT" \
        -a -n "$OVIRT_VOL_BOOT_SIZE" \
        -a -n "$OVIRT_VOL_SWAP_SIZE" \
        -a -n "$OVIRT_VOL_ROOT_SIZE" \
        -a -n "$OVIRT_VOL_CONFIG_SIZE" \
        -a -n "$OVIRT_VOL_LOGGING_SIZE"
}

# find_srv SERVICE PROTO
#
# reads DNS SRV record
# sets SRV_HOST and SRV_PORT if DNS SRV record found, clears them if not
# Example usage:
# find_srv ovirt tcp
# if [ -n "$SRV_HOST" -a -n "$SRV_PORT" ]; then
#   echo "oVirt Server found"
# else
#   echo "no oVirt Server available, running standalone"
# fi
find_srv()
{
    local dnsreply
    dnsreply=$(dig +short -t srv _$1._$2.$(dnsdomainname))
    if [ $? -eq 0 ]; then
        set _ $dnsreply; shift
        SRV_HOST=$4; SRV_PORT=$3
    else
        SRV_HOST=; SRV_PORT=
    fi
}

die()
{
    echo "$@" 1>&2; failure; echo 1>&2; exit 1
}

ovirt_setup_libvirtd() {
    # just to get a boot warning to shut up
    touch /etc/resolv.conf

    # make libvirtd listen on the external interfaces
    sed -i -e 's/^#\(LIBVIRTD_ARGS="--listen"\).*/\1/' \
       /etc/sysconfig/libvirtd

    # set up qemu daemon to allow outside VNC connections
    sed -i -e 's/^[[:space:]]*#[[:space:]]*\(vnc_listen = "0.0.0.0"\).*/\1/' \
       /etc/libvirt/qemu.conf
    # set up libvirtd to listen on TCP (for kerberos)
    sed -i -e "s/^[[:space:]]*#[[:space:]]*\(listen_tcp\)\>.*/\1 = 1/" \
       -e "s/^[[:space:]]*#[[:space:]]*\(listen_tls\)\>.*/\1 = 0/" \
       /etc/libvirt/libvirtd.conf

    # with libvirt (0.4.0), make sure we we setup gssapi in the mech_list
    sasl_conf=/etc/sasl2/libvirt.conf
    if ! grep -qE "^mech_list: gssapi" $sasl_conf ; then
       sed -i -e "s/^\([[:space:]]*mech_list.*\)/#\1/" $sasl_conf
       echo "mech_list: gssapi" >> $sasl_conf
    fi
}

ovirt_mount() {
    if [ -e /dev/disk/by-label/$OVIRT_LABEL ]; then
      mount -r /dev/disk/by-label/$OVIRT_LABEL $1 \
        || mount /dev/disk/by-label/$OVIRT_LABEL $1
    else
      mount -r /dev/live $1 \
        || mount /dev/live $1
    fi
}

md5() {
  md5sum $1 2>/dev/null | (read MD5 filename; echo $MD5)
}

# persist configuration to /config on OVIRT partition
#   ovirt_store_config /etc/config /etc/config2 ...
ovirt_store_config() {
    ovirt=$(mktemp -d)
    ovirt_mount $ovirt
    cfg=$ovirt/config
    rw=0
    printf "store config:"
    for f in "$@"; do
       # ignore non-/etc paths
       if [ $f != ${f#/etc/} ]; then
           # check if changed
           if [ "$(md5 $f)" != "$(md5 $cfg$f)" ]; then
               if [ $rw = 0 ]; then
                   mount -o remount,rw $ovirt
                   rw=1
               fi
               mkdir -p $cfg$(dirname $f)
               cp $f $cfg$f
               printf " $f"
           fi
       fi
    done
    echo
    umount $ovirt && rmdir $ovirt
}
