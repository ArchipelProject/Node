This document is for developers only.  It describes, step-by-step, all of the
painful steps that you need to do to get this whole setup running.  If you
just want to get up and running with Ovirt, you should consider either
using the pre-built appliance image or the kickstart image, both available
at http://ovirt.org/download.html

# FIXME: describe all of the other setup you need to do on the host (
KVM modules, bridge setup, etc.)


1.  Create the guest disk:

# qemu-img create -f qcow wui-appliance.dsk 4G

2.  Create some libvirt XML in the file wui-appliance.xml:

<domain type='kvm'>
  <name>wui-appliance</name>
  <uuid>035ee63e-9d0a-b174-ff22-ecd37dc4134a</uuid>
  <memory>512000</memory>
  <currentMemory>512000</currentMemory>
  <vcpu>2</vcpu>
  <os>
    <type>hvm</type>
    <boot dev='cdrom' />
  </os>
  <clock offset='utc'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <devices>
    <emulator>/usr/bin/qemu-kvm</emulator>
    <disk type='file'>
      <source file='/root/wui-appliance.dsk' />
      <target dev='hda'/>
    </disk>
    <disk type='file' device='cdrom'>
      <source file='/mnt/bigpapi/released/F-8/GOLD/Fedora/x86_64/iso/Fedora-8-x86_64-DVD.iso' />
      <target dev='hdc' />
      <readonly />
    </disk>
    <interface type='bridge'>
      <mac address='00:16:3e:08:91:e9'/>
      <source bridge='ovirtbr1'/>
    </interface>
    <input type='mouse' bus='ps2'/>
    <graphics type='vnc' port='-1' listen='0.0.0.0'/>
  </devices>
</domain>

4.  # virsh -c qemu:///system define wui-appliance.xml

5.  # virsh -c qemu:///system start wui-appliance

6.  # virt-viewer -c qemu:///system wui-appliance

7.  Do the install as normal; use the following kickstart either verbatim, or
as a guide as to what packages you should install:

# Kickstart file automatically generated by anaconda.

install
cdrom
lang en_US.UTF-8
keyboard us
network --device eth0 --bootproto dhcp
rootpw  --iscrypted $1$HNOucon/$m69RprODwQn4XjzVUi9TU0
firewall --enabled --port=22:tcp
authconfig --enableshadow --enablemd5
selinux --enforcing
timezone --utc America/New_York
bootloader --location=mbr --driveorder=sda
# The following is the partition information you requested
# Note that any partitions you deleted are not expressed
# here so unless you clear all partitions first, this is
# not guaranteed to work
#clearpart --all --drives=sda
#part /boot --fstype ext3 --size=200 --ondisk=sda
#part pv.2 --size=0 --grow --ondisk=sda
#volgroup VolGroup00 --pesize=32768 pv.2
#logvol swap --fstype swap --name=LogVol01 --vgname=VolGroup00 --size=496 --grow --maxsize=992
#logvol / --fstype ext3 --name=LogVol00 --vgname=VolGroup00 --size=1024 --grow

%packages
@admin-tools
@editors
@system-tools
@text-internet
@core
@base
@hardware-support
@web-server
@sql-server
@development-libs
@legacy-fonts
@development-tools
radeontool
fuse
pax
imake
-bittorrent
-fetchmail
-slrn
-cadaver
-mutt

8.  System will shut down after install

9.  Edit the wui-appliance XML:


<domain type='kvm'>
  <name>wui-appliance</name>
  <uuid>035ee63e-9d0a-b174-ff22-ecd37dc4134a</uuid>
  <memory>512000</memory>
  <currentMemory>512000</currentMemory>
  <vcpu>2</vcpu>
  <os>
    <type>hvm</type>
    <boot dev='hd' />
  </os>
  <clock offset='utc'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <devices>
    <emulator>/usr/bin/qemu-kvm</emulator>
    <disk type='file'>
      <source file='/root/wui-appliance.dsk' />
      <target dev='hda'/>
    </disk>
    <interface type='bridge'>
      <mac address='00:16:3e:08:91:e9'/>
      <source bridge='ovirtbr1'/>
    </interface>
    <input type='mouse' bus='ps2'/>
    <graphics type='vnc' port='-1' listen='0.0.0.0'/>
  </devices>
</domain>

10.  # virsh -c qemu:///system define wui-appliance.xml

11.  # virsh -c qemu:///system start wui-appliance

12.  # virt-viewer -c qemu:///system wui-appliance

13.  From now on, all of the commands are inside the guest.

14.  Setup the additional yum repositories you will need.  Put the following
in /etc/yum.repos.d/freeipa.repo:

[freeipa]
name=FreeIPA Development
baseurl=http://freeipa.com/downloads/devel/rpms/F7/x86_64/
enabled=1
gpgcheck=0

Also put the following into /etc/yum.repos.d/ovirt.repo:

[ovirt]
name=Ovirt
baseurl=http://ovirt.et.redhat.com/repos/ovirt/x86_64
enabled=1
gpgcheck=0

15.  # yum install dhcp tftp-server tftp dhclient ipa-server ipa-admintools xinetd libvirt cyrus-sasl-gssapi iscsi-initiator-utils collectd ruby-libvirt ruby-postgres ovirt-wui firefox xorg-x11-xauth

16.  We need to replace the stock mod_auth_kerb with the one from FreeIPA:

# rpm -e --nodeps mod_auth_kerb
# yum --disablerepo=* --enablerepo=freeipa install mod_auth_kerb

17.  # chkconfig ntpd on

18.  # echo "0.fedora.pool.ntp.org" >> /etc/ntp/step-tickers

19.  # service ntpd start

20.  # chkconfig yum-updatesd off

21.  # chkconfig iptables off

22.  # chkconfig libvirtd off

23.  # chkconfig bluetooth off

24.  # chkconfig cups off

25.  # chkconfig gpm off

26.  # chkconfig pcscd off

27.  # chkconfig dhcpd on

28.  # chkconfig xinetd on

29.  # chkconfig httpd on

30.  # chkconfig postgresql on

31.  Edit /etc/xinetd.d/tftp, and change "disable = yes" to "disable = no"

32.  # service xinetd restart

33.  Edit /etc/sasl2/libvirt.conf, make sure everything is commented out
except "mech_list: gssapi"

34.  # service postgresql initdb

35.  Edit /var/lib/pgsql/data/pg_hba.conf; erase the whole file, and make it
look like:

local all all trust
host all all 127.0.0.1 255.255.255.0 trust

36.  # service postgresql start

37.  Now, create a file that has a few SQL commands (I'll call mine psql.cmds):

CREATE USER ovirt WITH PASSWORD 'v23zj59an';
CREATE DATABASE ovirt;
GRANT ALL PRIVILEGES ON DATABASE ovirt to ovirt;
CREATE DATABASE ovirt_test;
GRANT ALL PRIVILEGES ON DATABASE ovirt_test to ovirt;

38.  # su - postgres -c "/usr/bin/psql -f psql.cmds"

39.  # cd /usr/share/ovirt-wui ; rake db:migrate

40.  # /usr/bin/ovirt_grant_admin_privileges.sh admin

# FIXME: to be completed
